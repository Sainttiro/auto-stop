# 🗺️ Карта проекта Auto-Stop v2.0.10

## 📁 Корневые файлы

📄 README.md - Основная документация проекта
  └─ Описание системы, возможности, инструкции по установке и настройке

📄 CHANGELOG.md - История изменений
  └─ Список версий и внесенных изменений

📄 plan.txt - Промпт для разработки
  └─ Описание требований и архитектуры системы

📄 requirements.txt - Зависимости Python
  └─ Список необходимых библиотек и их версий

📄 .env.example - Шаблон переменных окружения
  └─ Пример конфигурации с токенами API и другими секретами

📄 .gitignore - Исключения Git
  └─ Файлы и директории, игнорируемые системой контроля версий

📄 .dockerignore - Исключения Docker
  └─ Файлы и директории, игнорируемые при сборке Docker образа

📄 Dockerfile - Конфигурация Docker образа
  └─ Инструкции для сборки контейнера

📄 docker-compose.yml - Основная конфигурация Docker Compose
  └─ Настройки для запуска в production

📄 docker-compose.dev.yml - Конфигурация для разработки
  └─ Настройки для локальной разработки и тестирования

## 📁 .github/workflows/ - CI/CD конфигурация

📄 release.yml - Автоматический деплой при релизе
  └─ Сборка Docker образа, публикация в GHCR, деплой на сервер через SSH и Tailscale

📄 test.yml - Автоматическое тестирование
  └─ Запуск тестов, линтинг кода, проверка сборки Docker образа

## 📁 src/ - Исходный код

📄 main.py - Точка входа в приложение
  └─ Класс AutoStopSystem - основной класс системы
  └─ Инициализация компонентов, обработка сигналов, запуск и остановка

📄 __init__.py - Инициализация пакета
  └─ Пустой файл для обозначения директории как Python пакета

### 📁 src/api/ - Работа с Tinkoff Invest API

📄 __init__.py - Инициализация пакета API
  └─ Пустой файл для обозначения директории как Python пакета

📄 client.py - API клиент
  └─ Класс TinkoffAPIClient - обертка над AsyncClient из invest-python
  └─ Методы для работы с API: получение инструментов, выставление ордеров

📄 instrument_info.py - Кэш информации об инструментах
  └─ Класс InstrumentInfoCache - хранение и получение данных об инструментах
  └─ Методы для конвертации лотов, получения шага цены, тикера

### 📁 src/bot/ - Telegram бот

📄 __init__.py - Инициализация пакета бота
  └─ Пустой файл для обозначения директории как Python пакета

📄 bot.py - Основной класс Telegram бота
  └─ Класс TelegramBot - обработка команд и взаимодействие с пользователем
  └─ Команды: статус, позиции, статистика, управление аккаунтами

📄 settings_menu.py - Меню настроек в Telegram
  └─ Интерактивное меню для изменения параметров системы
  └─ Настройка SL/TP, включение/отключение уведомлений

### 📁 src/core/ - Ядро системы

📄 __init__.py - Инициализация пакета ядра
  └─ Пустой файл для обозначения директории как Python пакета

📄 stream_handler.py - Обработчик потоков данных
  └─ Класс StreamHandler - подписка и обработка gRPC потоков
  └─ Обработка исполнения ордеров и изменения позиций

📄 order_executor.py - Исполнитель ордеров
  └─ Класс OrderExecutor - выставление и отмена ордеров
  └─ Методы для создания SL/TP ордеров, отмены ордеров

📄 position_manager.py - Управление позициями
  └─ Класс PositionManager - отслеживание позиций и средней цены
  └─ Методы для обновления позиций, расчета средней цены

📄 risk_calculator.py - Калькулятор рисков
  └─ Класс RiskCalculator - расчет уровней SL/TP
  └─ Методы для расчета стоп-лосса и тейк-профита

### 📁 src/config/ - Конфигурация

📄 __init__.py - Инициализация пакета конфигурации
  └─ Пустой файл для обозначения директории как Python пакета

📄 loader.py - Загрузчик конфигурации
  └─ Функции для загрузки YAML конфигурации и переменных окружения

📄 settings.py - Модели настроек
  └─ Pydantic модели для валидации конфигурации

📄 settings_manager.py - Менеджер настроек
  └─ Класс SettingsManager - управление настройками в БД
  └─ Методы для получения и изменения настроек инструментов

### 📁 src/storage/ - Хранение данных

📄 __init__.py - Инициализация пакета хранения
  └─ Пустой файл для обозначения директории как Python пакета

📄 database.py - Работа с базой данных
  └─ Класс Database - интерфейс для работы с SQLite
  └─ Методы для создания таблиц, сохранения и получения данных

📄 models.py - Модели данных
  └─ SQLAlchemy модели: Position, Order, Account, Settings
  └─ Определение структуры таблиц и связей между ними

### 📁 src/strategies/ - Торговые стратегии

📄 __init__.py - Инициализация пакета стратегий
  └─ Пустой файл для обозначения директории как Python пакета

📄 base.py - Базовая стратегия
  └─ Абстрактный класс BaseStrategy - интерфейс для всех стратегий
  └─ Общие методы для работы со стратегиями

📄 stock_sl_tp.py - Стратегия для акций
  └─ Класс StockStrategy - логика SL/TP для акций
  └─ Расчет уровней в процентах от средней цены

📄 futures_sl_tp.py - Стратегия для фьючерсов
  └─ Класс FuturesStrategy - логика SL/TP для фьючерсов
  └─ Расчет уровней в процентах или шагах цены

📄 multi_tp.py - Многоуровневый тейк-профит
  └─ Класс MultiTakeProfitStrategy - частичное закрытие позиции
  └─ Логика для нескольких уровней TP с разным объемом

### 📁 src/analytics/ - Аналитика и статистика

📄 __init__.py - Инициализация пакета аналитики
  └─ Пустой файл для обозначения директории как Python пакета

📄 operations_fetcher.py - Получение операций
  └─ Класс OperationsFetcher - получение операций из API
  └─ Методы для получения истории операций по счету

📄 operations_cache.py - Кэширование операций
  └─ Класс OperationsCache - хранение операций в БД
  └─ Методы для обновления и получения операций из кэша

📄 statistics.py - Расчет статистики
  └─ Класс StatisticsCalculator - анализ торговых результатов
  └─ Расчет P&L, винрейта, средней прибыли/убытка

📄 reports.py - Форматирование отчетов
  └─ Класс ReportFormatter - создание отчетов для Telegram
  └─ Форматирование статистики в читаемый вид

### 📁 src/notifications/ - Уведомления

📄 __init__.py - Инициализация пакета уведомлений
  └─ Пустой файл для обозначения директории как Python пакета

📄 telegram.py - Telegram уведомления
  └─ Класс TelegramNotifier - отправка уведомлений в Telegram
  └─ Методы для форматирования и отправки разных типов уведомлений

### 📁 src/utils/ - Утилиты

📄 __init__.py - Инициализация пакета утилит
  └─ Пустой файл для обозначения директории как Python пакета

📄 logger.py - Настройка логирования
  └─ Функции setup_logger и get_logger для настройки логирования
  └─ Ротация логов, форматирование, уровни логирования

📄 converters.py - Конвертеры данных
  └─ Функции для конвертации типов данных
  └─ Преобразование между форматами API и внутренними форматами

## 📁 config/ - YAML конфигурация

📄 config.yaml - Основная конфигурация
  └─ Настройки API, параметры SL/TP, уведомления, логирование

📄 instruments.yaml - Настройки инструментов
  └─ Индивидуальные параметры для каждого инструмента

## 📁 docs/ - Документация

📄 QUICKSTART.md - Быстрый старт
  └─ Инструкции по быстрой установке и запуску системы (включая Tailscale)

📄 DEPLOYMENT.md - Развертывание
  └─ Подробные инструкции по деплою на сервер

📄 TROUBLESHOOTING.md - Решение проблем
  └─ Руководство по устранению типичных проблем

📄 CRITICAL_FIXES.md - Критические исправления
  └─ Описание критических багов и их исправлений

📄 MULTI_ACCOUNTS.md - Мультиаккаунты
  └─ Инструкции по настройке и использованию нескольких счетов

📄 GITHUB_SETUP.md - Настройка GitHub
  └─ Инструкции по настройке GitHub Actions и деплоя

📄 TAILSCALE_SETUP.md - Настройка Tailscale
  └─ Подробная инструкция по настройке Tailscale VPN

## 📁 scripts/ - Скрипты

📄 deploy.sh - Деплой на сервер
  └─ Скрипт для автоматического деплоя на сервер

📄 update.sh - Обновление системы
  └─ Скрипт для обновления системы до последней версии

📄 backup.sh - Резервное копирование
  └─ Скрипт для создания резервных копий БД и конфигурации

📄 logs.sh - Просмотр логов
  └─ Скрипт для удобного просмотра логов системы

📄 migrate_to_multiaccounts.py - Миграция на мультиаккаунты
  └─ Скрипт для миграции с одного аккаунта на мультиаккаунты

## 📁 tests/ - Тесты

📄 __init__.py - Инициализация пакета тестов
  └─ Пустой файл для обозначения директории как Python пакета

📄 test_risk_calculator.py - Тесты калькулятора рисков
  └─ Юнит-тесты для проверки расчета SL/TP уровней

## 📁 data/ - Данные

└─ Директория для хранения SQLite базы данных и других данных

## 📁 logs/ - Логи

└─ Директория для хранения логов системы
