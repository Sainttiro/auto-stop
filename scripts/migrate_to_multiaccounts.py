#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–æ–∫–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü—É accounts
"""
import asyncio
import os
import sys
from pathlib import Path

# –î–æ–±–∞–≤–∏—Ç—å –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent.parent))

from src.storage.database import Database
from src.utils.logger import get_logger
from dotenv import load_dotenv

logger = get_logger("migration")


async def migrate():
    """–ú–∏–≥—Ä–∞—Ü–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Ç–æ–∫–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü—É accounts"""
    
    # –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    load_dotenv()
    
    db = Database()
    await db.create_tables()
    
    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–∫–∫–∞—É–Ω—Ç—ã
    accounts = await db.get_all_accounts()
    
    if accounts:
        logger.info(f"‚úÖ –í –ë–î —É–∂–µ –µ—Å—Ç—å {len(accounts)} –∞–∫–∫–∞—É–Ω—Ç(–æ–≤). –ú–∏–≥—Ä–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")
        logger.info("–°–ø–∏—Å–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤:")
        for acc in accounts:
            status = "üü¢ –∞–∫—Ç–∏–≤–Ω—ã–π" if acc.is_active else "‚ö™ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π"
            logger.info(f"  - {acc.name} ({status}): {acc.account_id}")
        return
    
    # –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–∫–µ–Ω –∏–∑ .env
    token = os.getenv("TINKOFF_TOKEN")
    if not token:
        logger.error("‚ùå TINKOFF_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        logger.info("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª .env —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç TINKOFF_TOKEN")
        return
    
    # –ü–æ–ª—É—á–∏—Ç—å account_id –∏–∑ .env (–µ—Å–ª–∏ –µ—Å—Ç—å)
    account_id = os.getenv("TINKOFF_ACCOUNT_ID", "auto")
    
    # –°–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç
    try:
        logger.info("–°–æ–∑–¥–∞—é –ø–µ—Ä–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç 'main' –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Ç–æ–∫–µ–Ω–∞...")
        
        account = await db.add_account(
            name="main",
            token=token,
            account_id=account_id,
            description="–û—Å–Ω–æ–≤–Ω–æ–π —Å—á–µ—Ç (–º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)"
        )
        
        # –ü–æ–º–µ—Ç–∏—Ç—å –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω—ã–π
        await db.switch_account("main")
        
        logger.info("=" * 60)
        logger.info("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        logger.info("=" * 60)
        logger.info(f"–°–æ–∑–¥–∞–Ω –∞–∫–∫–∞—É–Ω—Ç: {account.name}")
        logger.info(f"ID –≤ –ë–î: {account.id}")
        logger.info(f"Account ID: {account.account_id}")
        logger.info(f"–ê–∫—Ç–∏–≤–Ω—ã–π: {account.is_active}")
        logger.info(f"–û–ø–∏—Å–∞–Ω–∏–µ: {account.description}")
        logger.info("=" * 60)
        logger.info("")
        logger.info("–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:")
        logger.info("  1. –î–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã —á–µ—Ä–µ–∑ Telegram –±–æ—Ç:")
        logger.info("     /add_account <–Ω–∞–∑–≤–∞–Ω–∏–µ> <—Ç–æ–∫–µ–Ω> <account_id> [–æ–ø–∏—Å–∞–Ω–∏–µ]")
        logger.info("")
        logger.info("  2. –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç—å—Å—è –º–µ–∂–¥—É –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏ –±–µ–∑ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞:")
        logger.info("     /switch_account <–Ω–∞–∑–≤–∞–Ω–∏–µ>")
        logger.info("")
        logger.info("  3. –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã:")
        logger.info("     /accounts")
        logger.info("=" * 60)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    print("=" * 60)
    print("–ú–∏–≥—Ä–∞—Ü–∏—è –∫ –º—É–ª—å—Ç–∏–∞–∫–∫–∞—É–Ω—Ç–∞–º")
    print("=" * 60)
    print("")
    
    asyncio.run(migrate())
