name: Build and Deploy Release

on:
  release:
    types: [published]
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version tag to deploy'
        required: true
        default: 'latest'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: sainttiro/auto-stop

jobs:
  quality-checks:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.12']

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Lint with flake8
        run: |
          # Проверка критических ошибок (синтаксис, неопределенные имена, неиспользуемые импорты)
          flake8 src --count --select=E9,F63,F7,F82,F401 --show-source --statistics
          # Полная проверка с выводом предупреждений
          flake8 src --count --max-complexity=10 --max-line-length=127 --statistics

      - name: Type check with mypy
        run: |
          mypy src/ || true

      - name: Run tests
        run: |
          pytest tests/ -v --cov=src --cov-report=term-missing

  build-and-push:
    runs-on: ubuntu-latest
    needs: quality-checks
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Connect to Tailscale
        uses: tailscale/github-action@v2
        with:
          authkey: ${{ secrets.TAILSCALE_AUTH_KEY }}

      - name: Deploy to server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_PORT || 2222 }}
          script: |
            cd /opt/projects/auto-stop
            
            # Pull latest changes
            git pull origin master
            
            # Set version from tag (remove 'v' prefix)
            export VERSION=$(echo "${{ github.ref_name }}" | sed 's/^v//')
            export GITHUB_REPOSITORY=sainttiro/auto-stop
            
            # Pull new image
            docker compose pull
            
            # Restart container
            docker compose up -d
            
            # Clean up old images
            docker image prune -f
            
            # Show status
            docker compose ps
            docker compose logs --tail=50

      - name: Notify on success
        if: success()
        run: |
          echo "✅ Deployment successful!"
          echo "Version: ${{ github.ref_name }}"

      - name: Notify on failure
        if: failure()
        run: |
          echo "❌ Deployment failed!"
          exit 1
