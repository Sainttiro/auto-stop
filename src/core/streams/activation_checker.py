"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å—Ç–æ–ø-–ª–æ—Å—Å–æ–≤ –∏ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–æ–≤
"""
from typing import Dict, Any, Tuple, Optional
from decimal import Decimal

from src.storage.database import Database
from src.storage.models import Position
from src.core.utils.price_calculator import calculate_activation_prices
from src.utils.logger import get_logger

logger = get_logger("core.streams.activation_checker")


class ActivationChecker:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å—Ç–æ–ø-–ª–æ—Å—Å–æ–≤ –∏ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–æ–≤
    """
    
    def __init__(self, db: Database):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
        
        Args:
            db: –û–±—ä–µ–∫—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        """
        self.db = db
        
        # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π, –æ–∂–∏–¥–∞—é—â–∏—Ö –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
        # –§–æ—Ä–º–∞—Ç: {figi: {'position_id': id, 'sl_activation_price': price, 'tp_activation_price': price, 'sl_activated': bool, 'tp_activated': bool}}
        self._pending_activations: Dict[str, Dict[str, Any]] = {}
    
    def add_pending_activation(
        self,
        figi: str,
        position_id: int,
        sl_activation_price: Optional[float],
        tp_activation_price: Optional[float]
    ) -> None:
        """
        –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –≤ —Å–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞—é—â–∏—Ö –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
        
        Args:
            figi: FIGI –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
            position_id: ID –ø–æ–∑–∏—Ü–∏–∏
            sl_activation_price: –¶–µ–Ω–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞
            tp_activation_price: –¶–µ–Ω–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞
        """
        self._pending_activations[figi] = {
            'position_id': position_id,
            'sl_activation_price': sl_activation_price,
            'tp_activation_price': tp_activation_price,
            'sl_activated': False,
            'tp_activated': False
        }
    
    def remove_pending_activation(self, figi: str) -> None:
        """
        –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ –æ–∂–∏–¥–∞—é—â–∏—Ö –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
        
        Args:
            figi: FIGI –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
        """
        if figi in self._pending_activations:
            del self._pending_activations[figi]
    
    def get_pending_activations(self) -> Dict[str, Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–∑–∏—Ü–∏–π, –æ–∂–∏–¥–∞—é—â–∏—Ö –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
        
        Returns:
            Dict[str, Dict[str, Any]]: –°–ª–æ–≤–∞—Ä—å –ø–æ–∑–∏—Ü–∏–π, –æ–∂–∏–¥–∞—é—â–∏—Ö –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
        """
        return self._pending_activations.copy()
    
    def is_pending_activation(self, figi: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞, –æ–∂–∏–¥–∞–µ—Ç –ª–∏ –ø–æ–∑–∏—Ü–∏—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
        
        Args:
            figi: FIGI –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
            
        Returns:
            bool: True, –µ—Å–ª–∏ –ø–æ–∑–∏—Ü–∏—è –æ–∂–∏–¥–∞–µ—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
        """
        return figi in self._pending_activations
    
    def get_activation_status(self, figi: str) -> Tuple[bool, bool]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏
        
        Args:
            figi: FIGI –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
            
        Returns:
            Tuple[bool, bool]: (sl_activated, tp_activated)
        """
        if figi not in self._pending_activations:
            return True, True  # –ï—Å–ª–∏ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ –æ–∂–∏–¥–∞—é—â–∏—Ö, —Å—á–∏—Ç–∞–µ–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏
        
        return (
            self._pending_activations[figi]['sl_activated'],
            self._pending_activations[figi]['tp_activated']
        )
    
    async def check_activation_conditions(
        self,
        figi: str,
        current_price: Decimal,
        position: Position,
        settings: Dict[str, Any]
    ) -> Tuple[bool, bool]:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ SL/TP
        
        Args:
            figi: FIGI –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
            current_price: –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞
            position: –ü–æ–∑–∏—Ü–∏—è
            settings: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
            
        Returns:
            Tuple[bool, bool]: (sl_activated, tp_activated)
        """
        sl_activation_pct = settings.get('sl_activation_pct')
        tp_activation_pct = settings.get('tp_activation_pct')
        
        # –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ —Å—Ä–∞–∑—É
        if sl_activation_pct is None and tp_activation_pct is None:
            return True, True
        
        # instrument_cache –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–µ–¥–∞–Ω –≤ –º–µ—Ç–æ–¥ –∏–ª–∏ –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä
        instrument_cache = None
        
        # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—ã –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
        sl_activation_price, tp_activation_price = await calculate_activation_prices(
            avg_price=Decimal(str(position.average_price)),
            direction=position.direction,
            sl_activation_pct=sl_activation_pct,
            tp_activation_pct=tp_activation_pct,
            figi=figi,
            instrument_cache=instrument_cache
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–∞—Ü–∏—é SL
        sl_activated = True  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ, –µ—Å–ª–∏ –Ω–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
        if sl_activation_price is not None:
            if position.direction == "LONG":
                # –î–ª—è LONG: –∞–∫—Ç–∏–≤–∞—Ü–∏—è SL –∫–æ–≥–¥–∞ —Ü–µ–Ω–∞ –ø–∞–¥–∞–µ—Ç –Ω–∏–∂–µ —É—Ä–æ–≤–Ω—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
                sl_activated = current_price <= sl_activation_price
            else:  # SHORT
                # –î–ª—è SHORT: –∞–∫—Ç–∏–≤–∞—Ü–∏—è SL –∫–æ–≥–¥–∞ —Ü–µ–Ω–∞ —Ä–∞—Å—Ç–µ—Ç –≤—ã—à–µ —É—Ä–æ–≤–Ω—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
                sl_activated = current_price >= sl_activation_price
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–∞—Ü–∏—é TP
        tp_activated = True  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ, –µ—Å–ª–∏ –Ω–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
        if tp_activation_price is not None:
            if position.direction == "LONG":
                # –î–ª—è LONG: –∞–∫—Ç–∏–≤–∞—Ü–∏—è TP –∫–æ–≥–¥–∞ —Ü–µ–Ω–∞ —Ä–∞—Å—Ç–µ—Ç –≤—ã—à–µ —É—Ä–æ–≤–Ω—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
                tp_activated = current_price >= tp_activation_price
            else:  # SHORT
                # –î–ª—è SHORT: –∞–∫—Ç–∏–≤–∞—Ü–∏—è TP –∫–æ–≥–¥–∞ —Ü–µ–Ω–∞ –ø–∞–¥–∞–µ—Ç –Ω–∏–∂–µ —É—Ä–æ–≤–Ω—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
                tp_activated = current_price <= tp_activation_price
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–∞—Ü–∏—é
        if sl_activated and sl_activation_price is not None:
            logger.info(
                f"üîî SL –¥–ª—è {position.ticker} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! "
                f"–¶–µ–Ω–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: {sl_activation_price}, —Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {current_price}"
            )
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
            await self.db.log_event(
                event_type="SL_ACTIVATED",
                account_id=position.account_id,
                figi=position.figi,
                ticker=position.ticker,
                description=f"SL –¥–ª—è {position.ticker} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω",
                details={
                    "activation_price": float(sl_activation_price),
                    "current_price": float(current_price),
                    "position_id": position.id
                }
            )
        
        if tp_activated and tp_activation_price is not None:
            logger.info(
                f"üîî TP –¥–ª—è {position.ticker} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! "
                f"–¶–µ–Ω–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: {tp_activation_price}, —Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {current_price}"
            )
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
            await self.db.log_event(
                event_type="TP_ACTIVATED",
                account_id=position.account_id,
                figi=position.figi,
                ticker=position.ticker,
                description=f"TP –¥–ª—è {position.ticker} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω",
                details={
                    "activation_price": float(tp_activation_price),
                    "current_price": float(current_price),
                    "position_id": position.id
                }
            )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –≤ —Å–ª–æ–≤–∞—Ä–µ
        if figi in self._pending_activations:
            if sl_activated:
                self._pending_activations[figi]['sl_activated'] = True
            if tp_activated:
                self._pending_activations[figi]['tp_activated'] = True
        
        return sl_activated, tp_activated
