import asyncio
from typing import Optional, Dict, Any
import json
from datetime import datetime

from telegram import Bot
from telegram.constants import ParseMode
from telegram.error import TelegramError

from src.config.settings import TelegramSettings
from src.utils.logger import get_logger

logger = get_logger("notifications.telegram")


class TelegramNotifier:
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ Telegram
    """
    
    def __init__(self, settings: TelegramSettings):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π Telegram
        
        Args:
            settings: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram
        """
        self.bot_token = settings.bot_token
        self.chat_id = settings.chat_id
        self.enabled_notifications = set(settings.notifications)
        self._bot: Optional[Bot] = None
        self._queue: asyncio.Queue = asyncio.Queue()
        self._worker_task: Optional[asyncio.Task] = None
        self._running = False
    
    async def start(self):
        """
        –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        """
        if self._running:
            logger.warning("–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π Telegram —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return
        
        if not self.bot_token or not self.chat_id:
            logger.error("–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–ª–∏ ID —á–∞—Ç–∞ Telegram")
            return
        
        try:
            self._bot = Bot(token=self.bot_token)
            await self._bot.get_me()  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            
            self._running = True
            self._worker_task = asyncio.create_task(self._process_queue())
            
            logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π Telegram –∑–∞–ø—É—â–µ–Ω")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await self.send_notification(
                "system_start",
                "üöÄ –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç–æ–ø-–ª–æ—Å—Å–∞–º–∏ –∏ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞–º–∏ –∑–∞–ø—É—â–µ–Ω–∞"
            )
            
        except TelegramError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram –±–æ—Ç–∞: {e}")
            self._bot = None
    
    async def stop(self):
        """
        –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        """
        if not self._running:
            return
        
        self._running = False
        
        if self._worker_task:
            self._worker_task.cancel()
            try:
                await self._worker_task
            except asyncio.CancelledError:
                pass
            self._worker_task = None
        
        logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π Telegram –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    async def send_notification(
        self,
        event_type: str,
        message: str,
        details: Optional[Dict[str, Any]] = None
    ):
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        
        Args:
            event_type: –¢–∏–ø —Å–æ–±—ã—Ç–∏—è
            message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            details: –î–µ—Ç–∞–ª–∏ —Å–æ–±—ã—Ç–∏—è
        """
        if not self._running or not self._bot:
            logger.warning(f"–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π Telegram –Ω–µ –∑–∞–ø—É—â–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º: {message}")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω –ª–∏ —ç—Ç–æ—Ç —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        if event_type not in self.enabled_notifications and "errors" != event_type:
            logger.debug(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ {event_type} –æ—Ç–∫–ª—é—á–µ–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å
        await self._queue.put((event_type, message, details))
    
    async def _process_queue(self):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        """
        while self._running:
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –æ—á–µ—Ä–µ–¥–∏
                event_type, message, details = await self._queue.get()
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
                text = self._format_message(event_type, message, details)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                await self._bot.send_message(
                    chat_id=self.chat_id,
                    text=text,
                    parse_mode=ParseMode.HTML
                )
                
                # –û—Ç–º–µ—á–∞–µ–º –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é
                self._queue.task_done()
                
                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç—ã Telegram API
                await asyncio.sleep(0.1)
                
            except asyncio.CancelledError:
                break
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è Telegram: {e}")
                await asyncio.sleep(1)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
    
    def _format_message(self, event_type: str, message: str, details: Optional[Dict[str, Any]]) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        
        Args:
            event_type: –¢–∏–ø —Å–æ–±—ã—Ç–∏—è
            message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            details: –î–µ—Ç–∞–ª–∏ —Å–æ–±—ã—Ç–∏—è
            
        Returns:
            str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏—è
        emoji = self._get_emoji_for_event(event_type)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        formatted_message = f"{emoji} <b>{message}</b>"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        if details:
            details_text = "\n\n<b>–î–µ—Ç–∞–ª–∏:</b>\n"
            for key, value in details.items():
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ, –µ—Å–ª–∏ —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å –∏–ª–∏ —Å–ø–∏—Å–æ–∫
                if isinstance(value, (dict, list)):
                    value = json.dumps(value, ensure_ascii=False, indent=2)
                details_text += f"‚Ä¢ <b>{key}:</b> {value}\n"
            
            formatted_message += details_text
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è
        now = datetime.now().strftime("%H:%M:%S")
        formatted_message += f"\n\n<i>–í—Ä–µ–º—è: {now}</i>"
        
        return formatted_message
    
    def _get_emoji_for_event(self, event_type: str) -> str:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏ –¥–ª—è —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏—è
        
        Args:
            event_type: –¢–∏–ø —Å–æ–±—ã—Ç–∏—è
            
        Returns:
            str: –≠–º–æ–¥–∑–∏
        """
        emoji_map = {
            "trade_executed": "üîÑ",
            "order_placed": "üìù",
            "stop_triggered": "üõë",
            "take_profit_triggered": "üí∞",
            "position_created": "‚ûï",
            "position_closed": "‚ûñ",
            "position_updated": "üìä",
            "multi_tp_setup": "üéØ",
            "multi_tp_triggered": "üéØ",
            "errors": "‚ùå",
            "system_start": "üöÄ",
            "system_stop": "üõë",
            "stream_error": "‚ö†Ô∏è",
        }
        
        return emoji_map.get(event_type, "‚ÑπÔ∏è")
