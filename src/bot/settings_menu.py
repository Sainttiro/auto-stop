"""
–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è Telegram –±–æ—Ç–∞
"""

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler
import json

from src.config.settings_manager import SettingsManager
from src.storage.database import Database
from src.utils.logger import get_logger

logger = get_logger("bot.settings_menu")

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
(
    MAIN_MENU,
    GLOBAL_SETTINGS,
    INSTRUMENT_LIST,
    INSTRUMENT_SETTINGS,
    EDIT_SL,
    EDIT_TP,
    MULTI_TP_MENU,
    ADD_LEVEL,
    ADD_LEVEL_PRICE,
    ADD_LEVEL_VOLUME,
    EDIT_LEVEL,
    EDIT_LEVEL_PRICE,
    EDIT_LEVEL_VOLUME,
    DELETE_LEVEL,
    SL_STRATEGY,
    ADD_INSTRUMENT,
    EDIT_INSTRUMENT_SL,
    EDIT_INSTRUMENT_TP,
    EDIT_SL_ACTIVATION,
    EDIT_TP_ACTIVATION,
    EDIT_INSTRUMENT_SL_ACTIVATION,
    EDIT_INSTRUMENT_TP_ACTIVATION,
) = range(22)


class SettingsMenu:
    """
    –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ç–æ—Ä–≥–æ–≤–ª–∏
    """
    
    def __init__(
        self,
        settings_manager: SettingsManager,
        database: Database,
        chat_id: str
    ):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
        
        Args:
            settings_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–∫
            database: –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
            chat_id: ID —á–∞—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        """
        self.settings_manager = settings_manager
        self.db = database
        self.chat_id = chat_id
    
    def _check_auth(self, update: Update) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return str(update.effective_chat.id) == self.chat_id
    
    # ==================== –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ ====================
    
    async def show_main_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        if not self._check_auth(update):
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return ConversationHandler.END
        
        keyboard = [
            [InlineKeyboardButton("üåç –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="global_settings")],
            [InlineKeyboardButton("üìà –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤", callback_data="instrument_list")],
            [InlineKeyboardButton("üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫", callback_data="view_all")],
            [InlineKeyboardButton("‚óÄÔ∏è –ó–∞–∫—Ä—ã—Ç—å", callback_data="close")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        text = (
            "‚öôÔ∏è <b>–ù–ê–°–¢–†–û–ô–ö–ò AUTO-STOP</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:"
        )
        
        if update.callback_query:
            await update.callback_query.edit_message_text(
                text=text,
                reply_markup=reply_markup,
                parse_mode='HTML'
            )
        else:
            await update.message.reply_text(
                text=text,
                reply_markup=reply_markup,
                parse_mode='HTML'
            )
        
        return MAIN_MENU
    
    # ==================== –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò ====================
    
    async def show_global_settings(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        query = update.callback_query
        await query.answer()
        
        # –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç
        active_account = await self.db.get_active_account()
        if not active_account:
            await query.edit_message_text(
                "‚ùå –ê–∫—Ç–∏–≤–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω",
                parse_mode='HTML'
            )
            return ConversationHandler.END
        
        # –ü–æ–ª—É—á–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        settings = await self.settings_manager.get_global_settings(active_account.account_id)
        
        if not settings:
            # –°–æ–∑–¥–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            settings = await self.settings_manager.create_global_settings(active_account.account_id)
        
        # –ü–∞—Ä—Å–∏–Ω–≥ Multi-TP —É—Ä–æ–≤–Ω–µ–π
        multi_tp_status = "‚úÖ –í–∫–ª—é—á–µ–Ω" if settings.multi_tp_enabled else "‚ùå –í—ã–∫–ª—é—á–µ–Ω"
        multi_tp_levels_count = 0
        if settings.multi_tp_levels:
            try:
                levels = json.loads(settings.multi_tp_levels)
                multi_tp_levels_count = len(levels)
            except:
                pass
        
        # –°—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
        sl_activation_status = "‚úÖ" if settings.sl_activation_pct is not None else "‚ùå"
        tp_activation_status = "‚úÖ" if settings.tp_activation_pct is not None else "‚ùå"
        
        keyboard = [
            [InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å SL", callback_data="edit_global_sl")],
            [InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å TP", callback_data="edit_global_tp")],
            [InlineKeyboardButton("üîî –ê–∫—Ç–∏–≤–∞—Ü–∏—è SL", callback_data="edit_global_sl_activation")],
            [InlineKeyboardButton("üîî –ê–∫—Ç–∏–≤–∞—Ü–∏—è TP", callback_data="edit_global_tp_activation")],
            [InlineKeyboardButton("üéØ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å Multi-TP", callback_data="global_multi_tp")],
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        text = (
            "üåç <b>–ì–õ–û–ë–ê–õ–¨–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò</b>\n"
            "<i>(–ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è –∫–æ –≤—Å–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)</i>\n\n"
            "‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n"
            f"‚îÇ üõë Stop Loss: <b>{settings.stop_loss_pct}%</b>\n"
            f"‚îÇ üéØ Take Profit: <b>{settings.take_profit_pct}%</b>\n"
            f"‚îÇ üîî –ê–∫—Ç–∏–≤–∞—Ü–∏—è SL: {sl_activation_status} "
        )
        
        if settings.sl_activation_pct is not None:
            text += f"<b>{settings.sl_activation_pct}%</b>"
        
        text += f"\n‚îÇ üîî –ê–∫—Ç–∏–≤–∞—Ü–∏—è TP: {tp_activation_status} "
        
        if settings.tp_activation_pct is not None:
            text += f"<b>{settings.tp_activation_pct}%</b>"
        
        text += f"\n‚îÇ üéØ Multi-TP: {multi_tp_status}"
        
        if multi_tp_levels_count > 0:
            text += f" ({multi_tp_levels_count} —É—Ä.)"
        
        text += "\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò"
        
        await query.edit_message_text(
            text=text,
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
        
        return GLOBAL_SETTINGS
    
    # ==================== –°–ü–ò–°–û–ö –ò–ù–°–¢–†–£–ú–ï–ù–¢–û–í ====================
    
    async def show_instrument_list(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"""
        query = update.callback_query
        await query.answer()
        
        # –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç
        active_account = await self.db.get_active_account()
        if not active_account:
            await query.edit_message_text("‚ùå –ê–∫—Ç–∏–≤–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return ConversationHandler.END
        
        # –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        instruments = await self.settings_manager.get_all_instruments(active_account.account_id)
        
        keyboard = []
        
        if instruments:
            for inst in instruments:
                keyboard.append([
                    InlineKeyboardButton(
                        f"üìà {inst.ticker}",
                        callback_data=f"instrument_{inst.ticker}"
                    )
                ])
        else:
            text_no_instruments = "\n<i>–ù–µ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —Å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏</i>\n"
        
        keyboard.append([InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç", callback_data="add_instrument")])
        keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        text = (
            "üìà <b>–ù–ê–°–¢–†–û–ô–ö–ò –ò–ù–°–¢–†–£–ú–ï–ù–¢–û–í</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:"
        )
        
        if not instruments:
            text += text_no_instruments
        
        await query.edit_message_text(
            text=text,
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
        
        return INSTRUMENT_LIST
    
    # ==================== –ü–†–û–°–ú–û–¢–† –í–°–ï–• –ù–ê–°–¢–†–û–ï–ö ====================
    
    async def view_all_settings(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–≥–ª–æ–±–∞–ª—å–Ω—ã–µ + –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã)"""
        query = update.callback_query
        await query.answer()
        
        # –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç
        active_account = await self.db.get_active_account()
        if not active_account:
            await query.edit_message_text("‚ùå –ê–∫—Ç–∏–≤–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return ConversationHandler.END
        
        # –ü–æ–ª—É—á–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        global_settings = await self.settings_manager.get_global_settings(active_account.account_id)
        
        text = "üìã <b>–í–°–ï –ù–ê–°–¢–†–û–ô–ö–ò</b>\n\n"
        
        # –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        if global_settings:
            multi_tp_status = "–≤–∫–ª—é—á–µ–Ω" if global_settings.multi_tp_enabled else "–≤—ã–∫–ª—é—á–µ–Ω"
            text += (
                "üåç <b>–ì–ª–æ–±–∞–ª—å–Ω—ã–µ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é):</b>\n"
                f"  üõë SL: {global_settings.stop_loss_pct}%\n"
                f"  üéØ TP: {global_settings.take_profit_pct}%\n"
                f"  üéØ Multi-TP: {multi_tp_status}\n\n"
            )
        else:
            text += (
                "üåç <b>–ì–ª–æ–±–∞–ª—å–Ω—ã–µ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é):</b>\n"
                "  üõë SL: 0.4%\n"
                "  üéØ TP: 1.0%\n"
                "  üéØ Multi-TP: –≤—ã–∫–ª—é—á–µ–Ω\n\n"
            )
        
        # –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        instruments = await self.settings_manager.get_all_instruments(active_account.account_id)
        
        if instruments:
            text += "üìà <b>–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏:</b>\n\n"
            for inst in instruments:
                text += f"<b>{inst.ticker}</b>:\n"
                
                if inst.stop_loss_pct is not None:
                    text += f"  üõë SL: {inst.stop_loss_pct}% ‚úèÔ∏è\n"
                else:
                    text += "  üõë SL: –≥–ª–æ–±–∞–ª—å–Ω—ã–µ\n"
                
                if inst.take_profit_pct is not None:
                    text += f"  üéØ TP: {inst.take_profit_pct}% ‚úèÔ∏è\n"
                else:
                    text += "  üéØ TP: –≥–ª–æ–±–∞–ª—å–Ω—ã–µ\n"
                
                if inst.multi_tp_enabled is not None:
                    status = "–≤–∫–ª—é—á–µ–Ω ‚úèÔ∏è" if inst.multi_tp_enabled else "–≤—ã–∫–ª—é—á–µ–Ω ‚úèÔ∏è"
                    text += f"  üéØ Multi-TP: {status}\n"
                else:
                    text += "  üéØ Multi-TP: –≥–ª–æ–±–∞–ª—å–Ω—ã–µ\n"
                
                text += "\n"
            
            text += "\n<i>–û—Å—Ç–∞–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</i>"
        else:
            text += "<i>–í—Å–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</i>"
        
        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            text=text,
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
        
        return MAIN_MENU
    
    # ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò CALLBACK ====================
    
    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∫–Ω–æ–ø–æ–∫"""
        query = update.callback_query
        await query.answer()
        
        data = query.data
        
        # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        if data == "main_menu":
            return await self.show_main_menu(update, context)
        
        # –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        elif data == "global_settings":
            return await self.show_global_settings(update, context)
        
        # –°–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        elif data == "instrument_list":
            return await self.show_instrument_list(update, context)
        
        # –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
        elif data == "view_all":
            return await self.view_all_settings(update, context)
        
        # –ó–∞–∫—Ä—ã—Ç—å –º–µ–Ω—é
        elif data == "close":
            await query.edit_message_text("‚úÖ –ú–µ–Ω—é –∑–∞–∫—Ä—ã—Ç–æ")
            return ConversationHandler.END
        
        return MAIN_MENU
    
    # ==================== –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –ì–õ–û–ë–ê–õ–¨–ù–´–• –ù–ê–°–¢–†–û–ï–ö ====================
    
    async def edit_global_sl(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ Stop Loss"""
        query = update.callback_query
        await query.answer()
        
        # –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        active_account = await self.db.get_active_account()
        if not active_account:
            await query.edit_message_text("‚ùå –ê–∫—Ç–∏–≤–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return ConversationHandler.END
        
        settings = await self.settings_manager.get_global_settings(active_account.account_id)
        current_sl = settings.stop_loss_pct if settings else 0.4
        
        keyboard = [[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="global_settings")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        text = (
            "‚úèÔ∏è <b>–ò–∑–º–µ–Ω–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π Stop Loss</b>\n\n"
            f"–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: <b>{current_sl}%</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö:\n"
            "–ü—Ä–∏–º–µ—Ä—ã: <code>0.5</code>, <code>1.0</code>, <code>2.5</code>\n\n"
            "–î–∏–∞–ø–∞–∑–æ–Ω: 0.1% - 10%"
        )
        
        await query.edit_message_text(
            text=text,
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
        
        # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç
        context.user_data['editing'] = 'global_sl'
        
        return EDIT_SL
    
    async def save_global_sl(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ Stop Loss"""
        try:
            # –ü–∞—Ä—Å–∏–Ω–≥ –∑–Ω–∞—á–µ–Ω–∏—è
            value = float(update.message.text.strip().replace(',', '.'))
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è
            if value < 0.1 or value > 10:
                await update.message.reply_text(
                    "‚ùå –ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 0.1% –¥–æ 10%\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
                )
                return EDIT_SL
            
            # –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç
            active_account = await self.db.get_active_account()
            if not active_account:
                await update.message.reply_text("‚ùå –ê–∫—Ç–∏–≤–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return ConversationHandler.END
            
            # –û–±–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            await self.settings_manager.update_global_settings(
                active_account.account_id,
                stop_loss_pct=value
            )
            
            await update.message.reply_text(
                f"‚úÖ –ì–ª–æ–±–∞–ª—å–Ω—ã–π Stop Loss –æ–±–Ω–æ–≤–ª–µ–Ω: <b>{value}%</b>\n\n"
                "–í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫...",
                parse_mode='HTML'
            )
            
            # –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
            # –°–æ–∑–¥–∞–µ–º —Ñ–µ–π–∫–æ–≤—ã–π callback query –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
            context.user_data['return_to'] = 'global_settings'
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é
            keyboard = [
                [InlineKeyboardButton("üåç –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="global_settings")],
                [InlineKeyboardButton("‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                "‚öôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=reply_markup
            )
            
            return MAIN_MENU
            
        except ValueError:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1.5):"
            )
            return EDIT_SL
    
    async def edit_global_tp(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ Take Profit"""
        query = update.callback_query
        await query.answer()
        
        # –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        active_account = await self.db.get_active_account()
        if not active_account:
            await query.edit_message_text("‚ùå –ê–∫—Ç–∏–≤–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return ConversationHandler.END
        
        settings = await self.settings_manager.get_global_settings(active_account.account_id)
        current_tp = settings.take_profit_pct if settings else 1.0
        
        keyboard = [[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="global_settings")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        text = (
            "‚úèÔ∏è <b>–ò–∑–º–µ–Ω–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π Take Profit</b>\n\n"
            f"–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: <b>{current_tp}%</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö:\n"
            "–ü—Ä–∏–º–µ—Ä—ã: <code>1.0</code>, <code>2.5</code>, <code>5.0</code>\n\n"
            "–î–∏–∞–ø–∞–∑–æ–Ω: 0.1% - 20%"
        )
        
        await query.edit_message_text(
            text=text,
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
        
        # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç
        context.user_data['editing'] = 'global_tp'
        
        return EDIT_TP
    
    async def save_global_tp(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ Take Profit"""
        try:
            # –ü–∞—Ä—Å–∏–Ω–≥ –∑–Ω–∞—á–µ–Ω–∏—è
            value = float(update.message.text.strip().replace(',', '.'))
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è
            if value < 0.1 or value > 20:
                await update.message.reply_text(
                    "‚ùå –ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 0.1% –¥–æ 20%\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
                )
                return EDIT_TP
            
            # –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç
            active_account = await self.db.get_active_account()
            if not active_account:
                await update.message.reply_text("‚ùå –ê–∫—Ç–∏–≤–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return ConversationHandler.END
            
            # –û–±–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            await self.settings_manager.update_global_settings(
                active_account.account_id,
                take_profit_pct=value
            )
            
            await update.message.reply_text(
                f"‚úÖ –ì–ª–æ–±–∞–ª—å–Ω—ã–π Take Profit –æ–±–Ω–æ–≤–ª–µ–Ω: <b>{value}%</b>\n\n"
                "–í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫...",
                parse_mode='HTML'
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é
            keyboard = [
                [InlineKeyboardButton("üåç –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="global_settings")],
                [InlineKeyboardButton("‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                "‚öôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=reply_markup
            )
            
            return MAIN_MENU
            
        except ValueError:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2.5):"
            )
            return EDIT_TP
    
    # ==================== –û–ë–ù–û–í–õ–ï–ù–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò CALLBACK ====================
    
    async def handle_callback_extended(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∫–Ω–æ–ø–æ–∫"""
        query = update.callback_query
        await query.answer()
        
        data = query.data
        
        # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        if data == "main_menu":
            return await self.show_main_menu(update, context)
        
        # –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        elif data == "global_settings":
            return await self.show_global_settings(update, context)
        
        # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
        elif data == "edit_global_sl":
            return await self.edit_global_sl(update, context)
        
        elif data == "edit_global_tp":
            return await self.edit_global_tp(update, context)
        
        # –°–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        elif data == "instrument_list":
            return await self.show_instrument_list(update, context)
        
        # –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
        elif data == "view_all":
            return await self.view_all_settings(update, context)
        
        # –ó–∞–∫—Ä—ã—Ç—å –º–µ–Ω—é
        elif data == "close":
            await query.edit_message_text("‚úÖ –ú–µ–Ω—é –∑–∞–∫—Ä—ã—Ç–æ")
            return ConversationHandler.END
        
        return MAIN_MENU
    
    # ==================== –ù–ê–°–¢–†–û–ô–ö–ò –ò–ù–°–¢–†–£–ú–ï–ù–¢–û–í ====================
    
    async def add_instrument_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞"""
        query = update.callback_query
        await query.answer()
        
        keyboard = [[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="instrument_list")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        text = (
            "‚ûï <b>–î–æ–±–∞–≤–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞:\n"
            "–ü—Ä–∏–º–µ—Ä—ã: <code>SBER</code>, <code>GAZP</code>, <code>YNDX</code>\n\n"
            "<i>–ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤—ã —Å–º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –¥–ª—è –Ω–µ–≥–æ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ SL/TP</i>"
        )
        
        await query.edit_message_text(
            text=text,
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
        
        return ADD_INSTRUMENT
    
    async def add_instrument_save(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–æ–≤—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç"""
        ticker = update.message.text.strip().upper()
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–∏–∫–µ—Ä–∞
        if not ticker or len(ticker) > 12:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–∫–µ—Ä. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–∫–µ—Ä (–¥–æ 12 —Å–∏–º–≤–æ–ª–æ–≤):"
            )
            return ADD_INSTRUMENT
        
        # –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç
        active_account = await self.db.get_active_account()
        if not active_account:
            await update.message.reply_text("‚ùå –ê–∫—Ç–∏–≤–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return ConversationHandler.END
        
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ
        existing = await self.settings_manager.get_instrument_settings(
            active_account.account_id,
            ticker
        )
        
        if existing:
            await update.message.reply_text(
                f"‚ö†Ô∏è –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç <b>{ticker}</b> —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω\n\n"
                "–í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ —Å–ø–∏—Å–æ–∫...",
                parse_mode='HTML'
            )
        else:
            # –°–æ–∑–¥–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–ø–æ–∫–∞ –ø—É—Å—Ç—ã–µ, –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≥–ª–æ–±–∞–ª—å–Ω—ã–µ)
            await self.settings_manager.create_instrument_settings(
                active_account.account_id,
                ticker
            )
            
            await update.message.reply_text(
                f"‚úÖ –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç <b>{ticker}</b> –¥–æ–±–∞–≤–ª–µ–Ω\n\n"
                "–°–µ–π—á–∞—Å –æ–Ω –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.\n"
                "–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.",
                parse_mode='HTML'
            )
        
        # –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        keyboard = [
            [InlineKeyboardButton("üìà –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤", callback_data="instrument_list")],
            [InlineKeyboardButton("‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "‚öôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup
        )
        
        return MAIN_MENU
    
    async def show_instrument_settings(self, update: Update, context: ContextTypes.DEFAULT_TYPE, ticker: str):
        """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞"""
        query = update.callback_query
        await query.answer()
        
        # –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç
        active_account = await self.db.get_active_account()
        if not active_account:
            await query.edit_message_text("‚ùå –ê–∫—Ç–∏–≤–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return ConversationHandler.END
        
        # –ü–æ–ª—É—á–∏—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        effective = await self.settings_manager.get_effective_settings(
            active_account.account_id,
            ticker
        )
        
        # –ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
        inst_settings = await self.settings_manager.get_instrument_settings(
            active_account.account_id,
            ticker
        )
        
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
        sl_text = f"{effective['stop_loss_pct']}%"
        tp_text = f"{effective['take_profit_pct']}%"
        
        if inst_settings and inst_settings.stop_loss_pct is not None:
            sl_text += " ‚úèÔ∏è"
            sl_source = "—Å–≤–æ–∏"
        else:
            sl_source = "–≥–ª–æ–±–∞–ª—å–Ω—ã–µ"
        
        if inst_settings and inst_settings.take_profit_pct is not None:
            tp_text += " ‚úèÔ∏è"
            tp_source = "—Å–≤–æ–∏"
        else:
            tp_source = "–≥–ª–æ–±–∞–ª—å–Ω—ã–µ"
        
        # –°—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
        sl_activation_text = "–Ω–µ –∑–∞–¥–∞–Ω–∞"
        tp_activation_text = "–Ω–µ –∑–∞–¥–∞–Ω–∞"
        sl_activation_source = "–≥–ª–æ–±–∞–ª—å–Ω—ã–µ"
        tp_activation_source = "–≥–ª–æ–±–∞–ª—å–Ω—ã–µ"
        
        if effective['sl_activation_pct'] is not None:
            sl_activation_text = f"{effective['sl_activation_pct']}%"
            if inst_settings and inst_settings.sl_activation_pct is not None:
                sl_activation_text += " ‚úèÔ∏è"
                sl_activation_source = "—Å–≤–æ–∏"
        
        if effective['tp_activation_pct'] is not None:
            tp_activation_text = f"{effective['tp_activation_pct']}%"
            if inst_settings and inst_settings.tp_activation_pct is not None:
                tp_activation_text += " ‚úèÔ∏è"
                tp_activation_source = "—Å–≤–æ–∏"
        
        multi_tp_status = "–≤–∫–ª—é—á–µ–Ω" if effective['multi_tp_enabled'] else "–≤—ã–∫–ª—é—á–µ–Ω"
        if inst_settings and inst_settings.multi_tp_enabled is not None:
            multi_tp_status += " ‚úèÔ∏è"
            multi_tp_source = "—Å–≤–æ–∏"
        else:
            multi_tp_source = "–≥–ª–æ–±–∞–ª—å–Ω—ã–µ"
        
        keyboard = [
            [InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å SL", callback_data=f"edit_inst_sl_{ticker}")],
            [InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å TP", callback_data=f"edit_inst_tp_{ticker}")],
            [InlineKeyboardButton("üîî –ê–∫—Ç–∏–≤–∞—Ü–∏—è SL", callback_data=f"edit_inst_sl_activation_{ticker}")],
            [InlineKeyboardButton("üîî –ê–∫—Ç–∏–≤–∞—Ü–∏—è TP", callback_data=f"edit_inst_tp_activation_{ticker}")],
            [InlineKeyboardButton("üéØ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å Multi-TP", callback_data=f"inst_multi_tp_{ticker}")],
            [InlineKeyboardButton("üîÑ –°–±—Ä–æ—Å–∏—Ç—å –Ω–∞ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ", callback_data=f"reset_inst_{ticker}")],
            [InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç", callback_data=f"delete_inst_{ticker}")],
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="instrument_list")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        text = (
            f"üìà <b>{ticker}</b>\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
            "‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n"
            f"‚îÇ üõë SL: <b>{sl_text}</b> ({sl_source})\n"
            f"‚îÇ üéØ TP: <b>{tp_text}</b> ({tp_source})\n"
            f"‚îÇ üîî –ê–∫—Ç–∏–≤–∞—Ü–∏—è SL: <b>{sl_activation_text}</b> ({sl_activation_source})\n"
            f"‚îÇ üîî –ê–∫—Ç–∏–≤–∞—Ü–∏—è TP: <b>{tp_activation_text}</b> ({tp_activation_source})\n"
            f"‚îÇ üéØ Multi-TP: {multi_tp_status} ({multi_tp_source})\n"
            "‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò"
        )
        
        await query.edit_message_text(
            text=text,
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
        
        return INSTRUMENT_SETTINGS
    
    async def reset_instrument_settings(self, update: Update, context: ContextTypes.DEFAULT_TYPE, ticker: str):
        """–°–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –Ω–∞ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ"""
        query = update.callback_query
        await query.answer()
        
        # –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç
        active_account = await self.db.get_active_account()
        if not active_account:
            await query.edit_message_text("‚ùå –ê–∫—Ç–∏–≤–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return ConversationHandler.END
        
        # –û–±–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –≤ NULL)
        await self.settings_manager.update_instrument_settings(
            active_account.account_id,
            ticker,
            stop_loss_pct=None,
            take_profit_pct=None,
            multi_tp_enabled=None,
            multi_tp_levels=None,
            multi_tp_sl_strategy=None
        )
        
        await query.answer("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã –Ω–∞ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ", show_alert=True)
        
        # –ü–æ–∫–∞–∑–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        return await self.show_instrument_settings(update, context, ticker)
    
    async def delete_instrument(self, update: Update, context: ContextTypes.DEFAULT_TYPE, ticker: str):
        """–£–¥–∞–ª–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        query = update.callback_query
        await query.answer()
        
        # –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç
        active_account = await self.db.get_active_account()
        if not active_account:
            await query.edit_message_text("‚ùå –ê–∫—Ç–∏–≤–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return ConversationHandler.END
        
        # –£–¥–∞–ª–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        deleted = await self.settings_manager.delete_instrument_settings(
            active_account.account_id,
            ticker
        )
        
        if deleted:
            await query.answer(f"‚úÖ –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç {ticker} —É–¥–∞–ª–µ–Ω", show_alert=True)
        else:
            await query.answer(f"‚ö†Ô∏è –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç {ticker} –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        
        # –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É
        return await self.show_instrument_list(update, context)
    
    # ==================== –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï SL/TP –î–õ–Ø –ò–ù–°–¢–†–£–ú–ï–ù–¢–û–í ====================
    
    async def edit_instrument_sl(self, update: Update, context: ContextTypes.DEFAULT_TYPE, ticker: str):
        """–ù–∞—á–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Stop Loss –¥–ª—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞"""
        query = update.callback_query
        await query.answer()
        
        # –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç
        active_account = await self.db.get_active_account()
        if not active_account:
            await query.edit_message_text("‚ùå –ê–∫—Ç–∏–≤–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return ConversationHandler.END
        
        # –ü–æ–ª—É—á–∏—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        effective = await self.settings_manager.get_effective_settings(
            active_account.account_id,
            ticker
        )
        
        current_sl = effective['stop_loss_pct']
        source = effective['source']
        
        keyboard = [[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"instrument_{ticker}")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        text = (
            f"‚úèÔ∏è <b>–ò–∑–º–µ–Ω–∏—Ç—å Stop Loss –¥–ª—è {ticker}</b>\n\n"
            f"–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: <b>{current_sl}%</b> ({source})\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö:\n"
            "–ü—Ä–∏–º–µ—Ä—ã: <code>0.5</code>, <code>1.0</code>, <code>2.5</code>\n\n"
            "–î–∏–∞–ø–∞–∑–æ–Ω: 0.1% - 10%"
        )
        
        await query.edit_message_text(
            text=text,
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
        
        # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç
        context.user_data['editing'] = 'instrument_sl'
        context.user_data['ticker'] = ticker
        
        return EDIT_INSTRUMENT_SL
    
    async def save_instrument_sl(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ Stop Loss –¥–ª—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞"""
        try:
            # –ü–∞—Ä—Å–∏–Ω–≥ –∑–Ω–∞—á–µ–Ω–∏—è
            value = float(update.message.text.strip().replace(',', '.'))
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è
            if value < 0.1 or value > 10:
                await update.message.reply_text(
                    "‚ùå –ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 0.1% –¥–æ 10%\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
                )
                return EDIT_INSTRUMENT_SL
            
            # –ü–æ–ª—É—á–∏—Ç—å —Ç–∏–∫–µ—Ä –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            ticker = context.user_data.get('ticker')
            if not ticker:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: —Ç–∏–∫–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return ConversationHandler.END
            
            # –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç
            active_account = await self.db.get_active_account()
            if not active_account:
                await update.message.reply_text("‚ùå –ê–∫—Ç–∏–≤–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return ConversationHandler.END
            
            # –û–±–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            await self.settings_manager.update_instrument_settings(
                active_account.account_id,
                ticker,
                stop_loss_pct=value
            )
            
            await update.message.reply_text(
                f"‚úÖ Stop Loss –¥–ª—è <b>{ticker}</b> –æ–±–Ω–æ–≤–ª–µ–Ω: <b>{value}%</b>\n\n"
                "–í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫...",
                parse_mode='HTML'
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é
            keyboard = [
                [InlineKeyboardButton(f"üìà {ticker}", callback_data=f"instrument_{ticker}")],
                [InlineKeyboardButton("üìà –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤", callback_data="instrument_list")],
                [InlineKeyboardButton("‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                "‚öôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=reply_markup
            )
            
            return MAIN_MENU
            
        except ValueError:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1.5):"
            )
            return EDIT_INSTRUMENT_SL
    
    async def edit_instrument_tp(self, update: Update, context: ContextTypes.DEFAULT_TYPE, ticker: str):
        """–ù–∞—á–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Take Profit –¥–ª—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞"""
        query = update.callback_query
        await query.answer()
        
        # –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç
        active_account = await self.db.get_active_account()
        if not active_account:
            await query.edit_message_text("‚ùå –ê–∫—Ç–∏–≤–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return ConversationHandler.END
        
        # –ü–æ–ª—É—á–∏—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        effective = await self.settings_manager.get_effective_settings(
            active_account.account_id,
            ticker
        )
        
        current_tp = effective['take_profit_pct']
        source = effective['source']
        
        keyboard = [[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"instrument_{ticker}")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        text = (
            f"‚úèÔ∏è <b>–ò–∑–º–µ–Ω–∏—Ç—å Take Profit –¥–ª—è {ticker}</b>\n\n"
            f"–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: <b>{current_tp}%</b> ({source})\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö:\n"
            "–ü—Ä–∏–º–µ—Ä—ã: <code>1.0</code>, <code>2.5</code>, <code>5.0</code>\n\n"
            "–î–∏–∞–ø–∞–∑–æ–Ω: 0.1% - 20%"
        )
        
        await query.edit_message_text(
            text=text,
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
        
        # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç
        context.user_data['editing'] = 'instrument_tp'
        context.user_data['ticker'] = ticker
        
        return EDIT_INSTRUMENT_TP
    
    async def save_instrument_tp(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ Take Profit –¥–ª—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞"""
        try:
            # –ü–∞—Ä—Å–∏–Ω–≥ –∑–Ω–∞—á–µ–Ω–∏—è
            value = float(update.message.text.strip().replace(',', '.'))
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è
            if value < 0.1 or value > 20:
                await update.message.reply_text(
                    "‚ùå –ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 0.1% –¥–æ 20%\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
                )
                return EDIT_INSTRUMENT_TP
            
            # –ü–æ–ª—É—á–∏—Ç—å —Ç–∏–∫–µ—Ä –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            ticker = context.user_data.get('ticker')
            if not ticker:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: —Ç–∏–∫–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return ConversationHandler.END
            
            # –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç
            active_account = await self.db.get_active_account()
            if not active_account:
                await update.message.reply_text("‚ùå –ê–∫—Ç–∏–≤–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return ConversationHandler.END
            
            # –û–±–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            await self.settings_manager.update_instrument_settings(
                active_account.account_id,
                ticker,
                take_profit_pct=value
            )
            
            await update.message.reply_text(
                f"‚úÖ Take Profit –¥–ª—è <b>{ticker}</b> –æ–±–Ω–æ–≤–ª–µ–Ω: <b>{value}%</b>\n\n"
                "–í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫...",
                parse_mode='HTML'
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é
            keyboard = [
                [InlineKeyboardButton(f"üìà {ticker}", callback_data=f"instrument_{ticker}")],
                [InlineKeyboardButton("üìà –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤", callback_data="instrument_list")],
                [InlineKeyboardButton("‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                "‚öôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=reply_markup
            )
            
            return MAIN_MENU
            
        except ValueError:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2.5):"
            )
            return EDIT_INSTRUMENT_TP
    
    # ==================== –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –ê–ö–¢–ò–í–ê–¶–ò–ò SL/TP ====================
    
    async def edit_global_sl_activation(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ Stop Loss"""
        query = update.callback_query
        await query.answer()
        
        # –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        active_account = await self.db.get_active_account()
        if not active_account:
            await query.edit_message_text("‚ùå –ê–∫—Ç–∏–≤–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return ConversationHandler.END
        
        settings = await self.settings_manager.get_global_settings(active_account.account_id)
        current_sl_activation = settings.sl_activation_pct if settings and settings.sl_activation_pct is not None else "–Ω–µ –∑–∞–¥–∞–Ω–∞"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        keyboard = []
        
        # –ï—Å–ª–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏—è —É–∂–µ –∑–∞–¥–∞–Ω–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
        if settings and settings.sl_activation_pct is not None:
            keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–∫–ª—é—á–∏—Ç—å –∞–∫—Ç–∏–≤–∞—Ü–∏—é", callback_data="disable_global_sl_activation")])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
        keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="global_settings")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        text = (
            "üîî <b>–ò–∑–º–µ–Ω–∏—Ç—å –∞–∫—Ç–∏–≤–∞—Ü–∏—é Stop Loss</b>\n\n"
            f"–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: <b>{current_sl_activation}</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö:\n"
            "–ü—Ä–∏–º–µ—Ä—ã: <code>0.2</code>, <code>0.3</code>\n\n"
            "–î–∏–∞–ø–∞–∑–æ–Ω: 0.1% - 5%\n\n"
            "<i>–ê–∫—Ç–∏–≤–∞—Ü–∏—è SL - —ç—Ç–æ –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç —Å—Ä–µ–¥–Ω–µ–π —Ü–µ–Ω—ã, –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –∫–æ—Ç–æ—Ä–æ–≥–æ –±—É–¥–µ—Ç –≤—ã—Å—Ç–∞–≤–ª–µ–Ω –æ—Ä–¥–µ—Ä SL.</i>\n"
            "<i>–ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ SL=0.4%, –∞ –∞–∫—Ç–∏–≤–∞—Ü–∏—è=0.2%, —Ç–æ –æ—Ä–¥–µ—Ä SL –±—É–¥–µ—Ç –≤—ã—Å—Ç–∞–≤–ª–µ–Ω —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ —Ü–µ–Ω–∞ —É–ø–∞–¥–µ—Ç –Ω–∞ 0.2%.</i>"
        )
        
        await query.edit_message_text(
            text=text,
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
        
        # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç
        context.user_data['editing'] = 'global_sl_activation'
        
        return EDIT_SL_ACTIVATION
    
    async def disable_global_sl_activation(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–∫–ª—é—á–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—É—é –∞–∫—Ç–∏–≤–∞—Ü–∏—é Stop Loss"""
        query = update.callback_query
        await query.answer()
        
        # –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç
        active_account = await self.db.get_active_account()
        if not active_account:
            await query.edit_message_text("‚ùå –ê–∫—Ç–∏–≤–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return ConversationHandler.END
        
        # –û–±–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        await self.settings_manager.update_global_settings(
            active_account.account_id,
            sl_activation_pct=None
        )
        
        await query.answer("‚úÖ –ê–∫—Ç–∏–≤–∞—Ü–∏—è SL –æ—Ç–∫–ª—é—á–µ–Ω–∞", show_alert=True)
        
        # –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
        return await self.show_global_settings(update, context)
    
    async def save_global_sl_activation(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ Stop Loss"""
        try:
            # –ü–∞—Ä—Å–∏–Ω–≥ –∑–Ω–∞—á–µ–Ω–∏—è
            value = float(update.message.text.strip().replace(',', '.'))
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è
            if value < 0.1 or value > 5:
                await update.message.reply_text(
                    "‚ùå –ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 0.1% –¥–æ 5%\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
                )
                return EDIT_SL_ACTIVATION
            
            # –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç
            active_account = await self.db.get_active_account()
            if not active_account:
                await update.message.reply_text("‚ùå –ê–∫—Ç–∏–≤–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return ConversationHandler.END
            
            # –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            settings = await self.settings_manager.get_global_settings(active_account.account_id)
            sl_pct = settings.stop_loss_pct if settings else 0.4
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å SL
            valid, error = self.settings_manager.validate_activation_settings(
                sl_pct=sl_pct,
                sl_activation_pct=value,
                tp_pct=0,
                tp_activation_pct=None
            )
            
            if not valid:
                await update.message.reply_text(
                    f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {error}\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
                )
                return EDIT_SL_ACTIVATION
            
            # –û–±–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            await self.settings_manager.update_global_settings(
                active_account.account_id,
                sl_activation_pct=value
            )
            
            await update.message.reply_text(
                f"‚úÖ –ì–ª–æ–±–∞–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è Stop Loss –æ–±–Ω–æ–≤–ª–µ–Ω–∞: <b>{value}%</b>\n\n"
                "–í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫...",
                parse_mode='HTML'
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é
            keyboard = [
                [InlineKeyboardButton("üåç –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="global_settings")],
                [InlineKeyboardButton("‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                "‚öôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=reply_markup
            )
            
            return MAIN_MENU
            
        except ValueError:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 0.2):"
            )
            return EDIT_SL_ACTIVATION
    
    async def edit_global_tp_activation(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ Take Profit"""
        query = update.callback_query
        await query.answer()
        
        # –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        active_account = await self.db.get_active_account()
        if not active_account:
            await query.edit_message_text("‚ùå –ê–∫—Ç–∏–≤–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return ConversationHandler.END
        
        settings = await self.settings_manager.get_global_settings(active_account.account_id)
        current_tp_activation = settings.tp_activation_pct if settings and settings.tp_activation_pct is not None else "–Ω–µ –∑–∞–¥–∞–Ω–∞"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        keyboard = []
        
        # –ï—Å–ª–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏—è —É–∂–µ –∑–∞–¥–∞–Ω–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
        if settings and settings.tp_activation_pct is not None:
            keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–∫–ª—é—á–∏—Ç—å –∞–∫—Ç–∏–≤–∞—Ü–∏—é", callback_data="disable_global_tp_activation")])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
        keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="global_settings")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        text = (
            "üîî <b>–ò–∑–º–µ–Ω–∏—Ç—å –∞–∫—Ç–∏–≤–∞—Ü–∏—é Take Profit</b>\n\n"
            f"–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: <b>{current_tp_activation}</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö:\n"
            "–ü—Ä–∏–º–µ—Ä—ã: <code>0.5</code>, <code>0.7</code>\n\n"
            "–î–∏–∞–ø–∞–∑–æ–Ω: 0.1% - 10%\n\n"
            "<i>–ê–∫—Ç–∏–≤–∞—Ü–∏—è TP - —ç—Ç–æ –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç —Å—Ä–µ–¥–Ω–µ–π —Ü–µ–Ω—ã, –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –∫–æ—Ç–æ—Ä–æ–≥–æ –±—É–¥–µ—Ç –≤—ã—Å—Ç–∞–≤–ª–µ–Ω –æ—Ä–¥–µ—Ä TP.</i>\n"
            "<i>–ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ TP=1.0%, –∞ –∞–∫—Ç–∏–≤–∞—Ü–∏—è=0.5%, —Ç–æ –æ—Ä–¥–µ—Ä TP –±—É–¥–µ—Ç –≤—ã—Å—Ç–∞–≤–ª–µ–Ω —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ —Ü–µ–Ω–∞ –≤—ã—Ä–∞—Å—Ç–µ—Ç –Ω–∞ 0.5%.</i>"
        )
        
        await query.edit_message_text(
            text=text,
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
        
        # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç
        context.user_data['editing'] = 'global_tp_activation'
        
        return EDIT_TP_ACTIVATION
    
    async def disable_global_tp_activation(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–∫–ª—é—á–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—É—é –∞–∫—Ç–∏–≤–∞—Ü–∏—é Take Profit"""
        query = update.callback_query
        await query.answer()
        
        # –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç
        active_account = await self.db.get_active_account()
        if not active_account:
            await query.edit_message_text("‚ùå –ê–∫—Ç–∏–≤–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return ConversationHandler.END
        
        # –û–±–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        await self.settings_manager.update_global_settings(
            active_account.account_id,
            tp_activation_pct=None
        )
        
        await query.answer("‚úÖ –ê–∫—Ç–∏–≤–∞—Ü–∏—è TP –æ—Ç–∫–ª—é—á–µ–Ω–∞", show_alert=True)
        
        # –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
        return await self.show_global_settings(update, context)
    
    async def save_global_tp_activation(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ Take Profit"""
        try:
            # –ü–∞—Ä—Å–∏–Ω–≥ –∑–Ω–∞—á–µ–Ω–∏—è
            value = float(update.message.text.strip().replace(',', '.'))
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è
            if value < 0.1 or value > 10:
                await update.message.reply_text(
                    "‚ùå –ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 0.1% –¥–æ 10%\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
                )
                return EDIT_TP_ACTIVATION
            
            # –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç
            active_account = await self.db.get_active_account()
            if not active_account:
                await update.message.reply_text("‚ùå –ê–∫—Ç–∏–≤–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return ConversationHandler.END
            
            # –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            settings = await self.settings_manager.get_global_settings(active_account.account_id)
            tp_pct = settings.take_profit_pct if settings else 1.0
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å TP
            valid, error = self.settings_manager.validate_activation_settings(
                sl_pct=0,
                sl_activation_pct=None,
                tp_pct=tp_pct,
                tp_activation_pct=value
            )
            
            if not valid:
                await update.message.reply_text(
                    f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {error}\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
                )
                return EDIT_TP_ACTIVATION
            
            # –û–±–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            await self.settings_manager.update_global_settings(
                active_account.account_id,
                tp_activation_pct=value
            )
            
            await update.message.reply_text(
                f"‚úÖ –ì–ª–æ–±–∞–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è Take Profit –æ–±–Ω–æ–≤–ª–µ–Ω–∞: <b>{value}%</b>\n\n"
                "–í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫...",
                parse_mode='HTML'
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é
            keyboard = [
                [InlineKeyboardButton("üåç –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="global_settings")],
                [InlineKeyboardButton("‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                "‚öôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=reply_markup
            )
            
            return MAIN_MENU
            
        except ValueError:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 0.5):"
            )
            return EDIT_TP_ACTIVATION
    
    async def edit_instrument_sl_activation(self, update: Update, context: ContextTypes.DEFAULT_TYPE, ticker: str):
        """–ù–∞—á–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ Stop Loss –¥–ª—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞"""
        query = update.callback_query
        await query.answer()
        
        # –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç
        active_account = await self.db.get_active_account()
        if not active_account:
            await query.edit_message_text("‚ùå –ê–∫—Ç–∏–≤–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return ConversationHandler.END
        
        # –ü–æ–ª—É—á–∏—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        effective = await self.settings_manager.get_effective_settings(
            active_account.account_id,
            ticker
        )
        
        # –ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
        inst_settings = await self.settings_manager.get_instrument_settings(
            active_account.account_id,
            ticker
        )
        
        current_sl_activation = effective['sl_activation_pct']
        source = "—Å–≤–æ–∏" if inst_settings and inst_settings.sl_activation_pct is not None else "–≥–ª–æ–±–∞–ª—å–Ω—ã–µ"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        keyboard = []
        
        # –ï—Å–ª–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏—è —É–∂–µ –∑–∞–¥–∞–Ω–∞ –¥–ª—è —ç—Ç–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
        if inst_settings and inst_settings.sl_activation_pct is not None:
            keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–∫–ª—é—á–∏—Ç—å –∞–∫—Ç–∏–≤–∞—Ü–∏—é", callback_data=f"disable_inst_sl_activation_{ticker}")])
        
        # –í—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —Å–±—Ä–æ—Å–∞ –Ω–∞ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        keyboard.append([InlineKeyboardButton("üîÑ –°–±—Ä–æ—Å–∏—Ç—å –Ω–∞ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ", callback_data=f"reset_inst_sl_activation_{ticker}")])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
        keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"instrument_{ticker}")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        text = (
            f"üîî <b>–ò–∑–º–µ–Ω–∏—Ç—å –∞–∫—Ç–∏–≤–∞—Ü–∏—é Stop Loss –¥–ª—è {ticker}</b>\n\n"
            f"–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: <b>{current_sl_activation if current_sl_activation is not None else '–Ω–µ –∑–∞–¥–∞–Ω–∞'}</b> ({source})\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö:\n"
            "–ü—Ä–∏–º–µ—Ä—ã: <code>0.2</code>, <code>0.3</code>\n\n"
            "–î–∏–∞–ø–∞–∑–æ–Ω: 0.1% - 5%\n\n"
            "<i>–ê–∫—Ç–∏–≤–∞—Ü–∏—è SL - —ç—Ç–æ –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç —Å—Ä–µ–¥–Ω–µ–π —Ü–µ–Ω—ã, –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –∫–æ—Ç–æ—Ä–æ–≥–æ –±—É–¥–µ—Ç –≤—ã—Å—Ç–∞–≤–ª–µ–Ω –æ—Ä–¥–µ—Ä SL.</i>\n"
            "<i>–ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ SL=0.4%, –∞ –∞–∫—Ç–∏–≤–∞—Ü–∏—è=0.2%, —Ç–æ –æ—Ä–¥–µ—Ä SL –±—É–¥–µ—Ç –≤—ã—Å—Ç–∞–≤–ª–µ–Ω —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ —Ü–µ–Ω–∞ —É–ø–∞–¥–µ—Ç –Ω–∞ 0.2%.</i>"
        )
        
        await query.edit_message_text(
            text=text,
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
        
        # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç
        context.user_data['editing'] = 'instrument_sl_activation'
        context.user_data['ticker'] = ticker
        
        return EDIT_INSTRUMENT_SL_ACTIVATION
    
    async def disable_instrument_sl_activation(self, update: Update, context: ContextTypes.DEFAULT_TYPE, ticker: str):
        """–û—Ç–∫–ª—é—á–∏—Ç—å –∞–∫—Ç–∏–≤–∞—Ü–∏—é Stop Loss –¥–ª—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞"""
        query = update.callback_query
        await query.answer()
        
        # –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç
        active_account = await self.db.get_active_account()
        if not active_account:
            await query.edit_message_text("‚ùå –ê–∫—Ç–∏–≤–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return ConversationHandler.END
        
        # –û–±–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        await self.settings_manager.update_instrument_settings(
            active_account.account_id,
            ticker,
            sl_activation_pct=0  # –Ø–≤–Ω–æ –∑–∞–¥–∞–µ–º 0, —á—Ç–æ–±—ã –æ—Ç–ª–∏—á–∞—Ç—å –æ—Ç NULL (–≥–ª–æ–±–∞–ª—å–Ω—ã–µ)
        )
        
        await query.answer("‚úÖ –ê–∫—Ç–∏–≤–∞—Ü–∏—è SL –æ—Ç–∫–ª—é—á–µ–Ω–∞ –¥–ª—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞", show_alert=True)
        
        # –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
        return await self.show_instrument_settings(update, context, ticker)
    
    async def reset_instrument_sl_activation(self, update: Update, context: ContextTypes.DEFAULT_TYPE, ticker: str):
        """–°–±—Ä–æ—Å–∏—Ç—å –∞–∫—Ç–∏–≤–∞—Ü–∏—é Stop Loss –¥–ª—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –Ω–∞ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ"""
        query = update.callback_query
        await query.answer()
        
        # –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç
        active_account = await self.db.get_active_account()
        if not active_account:
            await query.edit_message_text("‚ùå –ê–∫—Ç–∏–≤–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return ConversationHandler.END
        
        # –û–±–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        await self.settings_manager.update_instrument_settings(
            active_account.account_id,
            ticker,
            sl_activation_pct=None  # NULL = –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–µ
        )
        
        await query.answer("‚úÖ –ê–∫—Ç–∏–≤–∞—Ü–∏—è SL —Å–±—Ä–æ—à–µ–Ω–∞ –Ω–∞ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ", show_alert=True)
        
        # –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
        return await self.show_instrument_settings(update, context, ticker)
    
    async def save_instrument_sl_activation(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ Stop Loss –¥–ª—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞"""
        try:
            # –ü–∞—Ä—Å–∏–Ω–≥ –∑–Ω–∞—á–µ–Ω–∏—è
            value = float(update.message.text.strip().replace(',', '.'))
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è
            if value < 0.1 or value > 5:
                await update.message.reply_text(
                    "‚ùå –ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 0.1% –¥–æ 5%\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
                )
                return EDIT_INSTRUMENT_SL_ACTIVATION
            
            # –ü–æ–ª—É—á–∏—Ç—å —Ç–∏–∫–µ—Ä –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            ticker = context.user_data.get('ticker')
            if not ticker:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: —Ç–∏–∫–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return ConversationHandler.END
            
            # –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç
            active_account = await self.db.get_active_account()
            if not active_account:
                await update.message.reply_text("‚ùå –ê–∫—Ç–∏–≤–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return ConversationHandler.END
            
            # –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            effective = await self.settings_manager.get_effective_settings(
                active_account.account_id,
                ticker
            )
            sl_pct = effective['stop_loss_pct']
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å SL
            valid, error = self.settings_manager.validate_activation_settings(
                sl_pct=sl_pct,
                sl_activation_pct=value,
                tp_pct=0,
                tp_activation_pct=None
            )
            
            if not valid:
                await update.message.reply_text(
                    f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {error}\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
                )
                return EDIT_INSTRUMENT_SL_ACTIVATION
            
            # –û–±–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            await self.settings_manager.update_instrument_settings(
                active_account.account_id,
                ticker,
                sl_activation_pct=value
            )
            
            await update.message.reply_text(
                f"‚úÖ –ê–∫—Ç–∏–≤–∞—Ü–∏—è Stop Loss –¥–ª—è <b>{ticker}</b> –æ–±–Ω–æ–≤–ª–µ–Ω–∞: <b>{value}%</b>\n\n"
                "–í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫...",
                parse_mode='HTML'
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é
            keyboard = [
                [InlineKeyboardButton(f"üìà {ticker}", callback_data=f"instrument_{ticker}")],
                [InlineKeyboardButton("üìà –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤", callback_data="instrument_list")],
                [InlineKeyboardButton("‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                "‚öôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=reply_markup
            )
            
            return MAIN_MENU
            
        except ValueError:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 0.2):"
            )
            return EDIT_INSTRUMENT_SL_ACTIVATION
    
    async def edit_instrument_tp_activation(self, update: Update, context: ContextTypes.DEFAULT_TYPE, ticker: str):
        """–ù–∞—á–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ Take Profit –¥–ª—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞"""
        query = update.callback_query
        await query.answer()
        
        # –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç
        active_account = await self.db.get_active_account()
        if not active_account:
            await query.edit_message_text("‚ùå –ê–∫—Ç–∏–≤–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return ConversationHandler.END
        
        # –ü–æ–ª—É—á–∏—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        effective = await self.settings_manager.get_effective_settings(
            active_account.account_id,
            ticker
        )
        
        # –ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
        inst_settings = await self.settings_manager.get_instrument_settings(
            active_account.account_id,
            ticker
        )
        
        current_tp_activation = effective['tp_activation_pct']
        source = "—Å–≤–æ–∏" if inst_settings and inst_settings.tp_activation_pct is not None else "–≥–ª–æ–±–∞–ª—å–Ω—ã–µ"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        keyboard = []
        
        # –ï—Å–ª–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏—è —É–∂–µ –∑–∞–¥–∞–Ω–∞ –¥–ª—è —ç—Ç–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
        if inst_settings and inst_settings.tp_activation_pct is not None:
            keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–∫–ª—é—á–∏—Ç—å –∞–∫—Ç–∏–≤–∞—Ü–∏—é", callback_data=f"disable_inst_tp_activation_{ticker}")])
        
        # –í—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —Å–±—Ä–æ—Å–∞ –Ω–∞ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        keyboard.append([InlineKeyboardButton("üîÑ –°–±—Ä–æ—Å–∏—Ç—å –Ω–∞ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ", callback_data=f"reset_inst_tp_activation_{ticker}")])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
        keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"instrument_{ticker}")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        text = (
            f"üîî <b>–ò–∑–º–µ–Ω–∏—Ç—å –∞–∫—Ç–∏–≤–∞—Ü–∏—é Take Profit –¥–ª—è {ticker}</b>\n\n"
            f"–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: <b>{current_tp_activation if current_tp_activation is not None else '–Ω–µ –∑–∞–¥–∞–Ω–∞'}</b> ({source})\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö:\n"
            "–ü—Ä–∏–º–µ—Ä—ã: <code>0.5</code>, <code>0.7</code>\n\n"
            "–î–∏–∞–ø–∞–∑–æ–Ω: 0.1% - 10%\n\n"
            "<i>–ê–∫—Ç–∏–≤–∞—Ü–∏—è TP - —ç—Ç–æ –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç —Å—Ä–µ–¥–Ω–µ–π —Ü–µ–Ω—ã, –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –∫–æ—Ç–æ—Ä–æ–≥–æ –±—É–¥–µ—Ç –≤—ã—Å—Ç–∞–≤–ª–µ–Ω –æ—Ä–¥–µ—Ä TP.</i>\n"
            "<i>–ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ TP=1.0%, –∞ –∞–∫—Ç–∏–≤–∞—Ü–∏—è=0.5%, —Ç–æ –æ—Ä–¥–µ—Ä TP –±—É–¥–µ—Ç –≤—ã—Å—Ç–∞–≤–ª–µ–Ω —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ —Ü–µ–Ω–∞ –≤—ã—Ä–∞—Å—Ç–µ—Ç –Ω–∞ 0.5%.</i>"
        )
        
        await query.edit_message_text(
            text=text,
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
        
        # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç
        context.user_data['editing'] = 'instrument_tp_activation'
        context.user_data['ticker'] = ticker
        
        return EDIT_INSTRUMENT_TP_ACTIVATION
    
    async def disable_instrument_tp_activation(self, update: Update, context: ContextTypes.DEFAULT_TYPE, ticker: str):
        """–û—Ç–∫–ª—é—á–∏—Ç—å –∞–∫—Ç–∏–≤–∞—Ü–∏—é Take Profit –¥–ª—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞"""
        query = update.callback_query
        await query.answer()
        
        # –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç
        active_account = await self.db.get_active_account()
        if not active_account:
            await query.edit_message_text("‚ùå –ê–∫—Ç–∏–≤–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return ConversationHandler.END
        
        # –û–±–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        await self.settings_manager.update_instrument_settings(
            active_account.account_id,
            ticker,
            tp_activation_pct=0  # –Ø–≤–Ω–æ –∑–∞–¥–∞–µ–º 0, —á—Ç–æ–±—ã –æ—Ç–ª–∏—á–∞—Ç—å –æ—Ç NULL (–≥–ª–æ–±–∞–ª—å–Ω—ã–µ)
        )
        
        await query.answer("‚úÖ –ê–∫—Ç–∏–≤–∞—Ü–∏—è TP –æ—Ç–∫–ª—é—á–µ–Ω–∞ –¥–ª—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞", show_alert=True)
        
        # –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
        return await self.show_instrument_settings(update, context, ticker)
    
    async def reset_instrument_tp_activation(self, update: Update, context: ContextTypes.DEFAULT_TYPE, ticker: str):
        """–°–±—Ä–æ—Å–∏—Ç—å –∞–∫—Ç–∏–≤–∞—Ü–∏—é Take Profit –¥–ª—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –Ω–∞ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ"""
        query = update.callback_query
        await query.answer()
        
        # –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç
        active_account = await self.db.get_active_account()
        if not active_account:
            await query.edit_message_text("‚ùå –ê–∫—Ç–∏–≤–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return ConversationHandler.END
        
        # –û–±–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        await self.settings_manager.update_instrument_settings(
            active_account.account_id,
            ticker,
            tp_activation_pct=None  # NULL = –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–µ
        )
        
        await query.answer("‚úÖ –ê–∫—Ç–∏–≤–∞—Ü–∏—è TP —Å–±—Ä–æ—à–µ–Ω–∞ –Ω–∞ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ", show_alert=True)
        
        # –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
        return await self.show_instrument_settings(update, context, ticker)
    
    async def save_instrument_tp_activation(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ Take Profit –¥–ª—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞"""
        try:
            # –ü–∞—Ä—Å–∏–Ω–≥ –∑–Ω–∞—á–µ–Ω–∏—è
            value = float(update.message.text.strip().replace(',', '.'))
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è
            if value < 0.1 or value > 10:
                await update.message.reply_text(
                    "‚ùå –ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 0.1% –¥–æ 10%\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
                )
                return EDIT_INSTRUMENT_TP_ACTIVATION
            
            # –ü–æ–ª—É—á–∏—Ç—å —Ç–∏–∫–µ—Ä –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            ticker = context.user_data.get('ticker')
            if not ticker:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: —Ç–∏–∫–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return ConversationHandler.END
            
            # –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç
            active_account = await self.db.get_active_account()
            if not active_account:
                await update.message.reply_text("‚ùå –ê–∫—Ç–∏–≤–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return ConversationHandler.END
            
            # –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            effective = await self.settings_manager.get_effective_settings(
                active_account.account_id,
                ticker
            )
            tp_pct = effective['take_profit_pct']
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å TP
            valid, error = self.settings_manager.validate_activation_settings(
                sl_pct=0,
                sl_activation_pct=None,
                tp_pct=tp_pct,
                tp_activation_pct=value
            )
            
            if not valid:
                await update.message.reply_text(
                    f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {error}\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
                )
                return EDIT_INSTRUMENT_TP_ACTIVATION
            
            # –û–±–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            await self.settings_manager.update_instrument_settings(
                active_account.account_id,
                ticker,
                tp_activation_pct=value
            )
            
            await update.message.reply_text(
                f"‚úÖ –ê–∫—Ç–∏–≤–∞—Ü–∏—è Take Profit –¥–ª—è <b>{ticker}</b> –æ–±–Ω–æ–≤–ª–µ–Ω–∞: <b>{value}%</b>\n\n"
                "–í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫...",
                parse_mode='HTML'
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é
            keyboard = [
                [InlineKeyboardButton(f"üìà {ticker}", callback_data=f"instrument_{ticker}")],
                [InlineKeyboardButton("üìà –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤", callback_data="instrument_list")],
                [InlineKeyboardButton("‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                "‚öôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=reply_markup
            )
            
            return MAIN_MENU
            
        except ValueError:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 0.5):"
            )
            return EDIT_INSTRUMENT_TP_ACTIVATION
    
    # ==================== –û–ë–ù–û–í–õ–ï–ù–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò CALLBACK ====================
    
    async def handle_callback_full(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–ª–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∫–Ω–æ–ø–æ–∫"""
        query = update.callback_query
        await query.answer()
        
        data = query.data
        
        # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        if data == "main_menu":
            return await self.show_main_menu(update, context)
        
        # –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        elif data == "global_settings":
            return await self.show_global_settings(update, context)
        
        # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
        elif data == "edit_global_sl":
            return await self.edit_global_sl(update, context)
        
        elif data == "edit_global_tp":
            return await self.edit_global_tp(update, context)
        
        # –ê–∫—Ç–∏–≤–∞—Ü–∏—è SL/TP –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
        elif data == "edit_global_sl_activation":
            return await self.edit_global_sl_activation(update, context)
        
        elif data == "disable_global_sl_activation":
            return await self.disable_global_sl_activation(update, context)
        
        elif data == "edit_global_tp_activation":
            return await self.edit_global_tp_activation(update, context)
        
        elif data == "disable_global_tp_activation":
            return await self.disable_global_tp_activation(update, context)
        
        # Multi-TP –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
        elif data == "global_multi_tp":
            return await self.show_multi_tp_menu(update, context, is_global=True)
        
        elif data == "toggle_global_multi_tp":
            return await self.toggle_multi_tp(update, context, is_global=True)
        
        elif data == "add_global_level":
            return await self.add_level_start(update, context)
        
        elif data == "edit_level_menu_global":
            return await self.edit_level_menu(update, context)
        
        elif data == "delete_level_menu_global":
            return await self.delete_level_menu(update, context)
        
        elif data == "show_multi_tp":
            ctx = context.user_data.get('multi_tp_context', {})
            is_global = ctx.get('is_global', True)
            ticker = ctx.get('ticker')
            return await self.show_multi_tp_menu(update, context, is_global, ticker)
        
        # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Ä–æ–≤–Ω—è Multi-TP
        elif data.startswith("edit_level_") and not data.startswith("edit_level_menu_"):
            parts = data.replace("edit_level_", "").split("_")
            level_index = int(parts[0])
            return await self.edit_level_start(update, context, level_index)
        
        # –£–¥–∞–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è Multi-TP
        elif data.startswith("delete_level_") and not data.startswith("delete_level_menu_"):
            parts = data.replace("delete_level_", "").split("_")
            level_index = int(parts[0])
            return await self.delete_level_confirm(update, context, level_index)
        
        elif data.startswith("confirm_delete_"):
            return await self.delete_level_execute(update, context)
        
        # –°–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        elif data == "instrument_list":
            return await self.show_instrument_list(update, context)
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
        elif data == "add_instrument":
            return await self.add_instrument_start(update, context)
        
        # Multi-TP –¥–ª—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
        elif data.startswith("inst_multi_tp_"):
            ticker = data.replace("inst_multi_tp_", "")
            return await self.show_multi_tp_menu(update, context, is_global=False, ticker=ticker)
        
        elif data.startswith("toggle_inst_multi_tp_"):
            ticker = data.replace("toggle_inst_multi_tp_", "")
            return await self.toggle_multi_tp(update, context, is_global=False, ticker=ticker)
        
        elif data.startswith("add_inst_level_"):
            return await self.add_level_start(update, context)
        
        elif data.startswith("edit_level_menu_") and data != "edit_level_menu_global":
            return await self.edit_level_menu(update, context)
        
        elif data.startswith("delete_level_menu_") and data != "delete_level_menu_global":
            return await self.delete_level_menu(update, context)
        
        # –ü—Ä–æ—Å–º–æ—Ç—Ä –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
        elif data.startswith("instrument_"):
            ticker = data.replace("instrument_", "")
            return await self.show_instrument_settings(update, context, ticker)
        
        # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ SL/TP –¥–ª—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
        elif data.startswith("edit_inst_sl_") and not data.startswith("edit_inst_sl_activation_"):
            ticker = data.replace("edit_inst_sl_", "")
            return await self.edit_instrument_sl(update, context, ticker)
        
        elif data.startswith("edit_inst_tp_") and not data.startswith("edit_inst_tp_activation_"):
            ticker = data.replace("edit_inst_tp_", "")
            return await self.edit_instrument_tp(update, context, ticker)
        
        # –ê–∫—Ç–∏–≤–∞—Ü–∏—è SL/TP –¥–ª—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
        elif data.startswith("edit_inst_sl_activation_"):
            ticker = data.replace("edit_inst_sl_activation_", "")
            return await self.edit_instrument_sl_activation(update, context, ticker)
        
        elif data.startswith("disable_inst_sl_activation_"):
            ticker = data.replace("disable_inst_sl_activation_", "")
            return await self.disable_instrument_sl_activation(update, context, ticker)
        
        elif data.startswith("reset_inst_sl_activation_"):
            ticker = data.replace("reset_inst_sl_activation_", "")
            return await self.reset_instrument_sl_activation(update, context, ticker)
        
        elif data.startswith("edit_inst_tp_activation_"):
            ticker = data.replace("edit_inst_tp_activation_", "")
            return await self.edit_instrument_tp_activation(update, context, ticker)
        
        elif data.startswith("disable_inst_tp_activation_"):
            ticker = data.replace("disable_inst_tp_activation_", "")
            return await self.disable_instrument_tp_activation(update, context, ticker)
        
        elif data.startswith("reset_inst_tp_activation_"):
            ticker = data.replace("reset_inst_tp_activation_", "")
            return await self.reset_instrument_tp_activation(update, context, ticker)
        
        # –°–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
        elif data.startswith("reset_inst_") and not data.startswith("reset_inst_sl_activation_") and not data.startswith("reset_inst_tp_activation_"):
            ticker = data.replace("reset_inst_", "")
            return await self.reset_instrument_settings(update, context, ticker)
        
        # –£–¥–∞–ª–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
        elif data.startswith("delete_inst_"):
            ticker = data.replace("delete_inst_", "")
            return await self.delete_instrument(update, context, ticker)
        
        # –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
        elif data == "view_all":
            return await self.view_all_settings(update, context)
        
        # –ó–∞–∫—Ä—ã—Ç—å –º–µ–Ω—é
        elif data == "close":
            await query.edit_message_text("‚úÖ –ú–µ–Ω—é –∑–∞–∫—Ä—ã—Ç–æ")
            return ConversationHandler.END
        
        return MAIN_MENU
    
    # ==================== MULTI-TP –§–£–ù–ö–¶–ò–û–ù–ê–õ ====================
    
    async def show_multi_tp_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE, is_global: bool = True, ticker: str = None):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é Multi-TP"""
        query = update.callback_query
        await query.answer()
        
        # –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç
        active_account = await self.db.get_active_account()
        if not active_account:
            await query.edit_message_text("‚ùå –ê–∫—Ç–∏–≤–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return ConversationHandler.END
        
        # –ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        if is_global:
            settings = await self.settings_manager.get_global_settings(active_account.account_id)
            if not settings:
                settings = await self.settings_manager.create_global_settings(active_account.account_id)
            
            multi_tp_enabled = settings.multi_tp_enabled
            multi_tp_levels_json = settings.multi_tp_levels
            title = "üåç –ì–õ–û–ë–ê–õ–¨–ù–´–ô MULTI-TP"
            back_callback = "global_settings"
            toggle_callback = "toggle_global_multi_tp"
            add_callback = "add_global_level"
        else:
            effective = await self.settings_manager.get_effective_settings(active_account.account_id, ticker)
            multi_tp_enabled = effective['multi_tp_enabled']
            multi_tp_levels_json = json.dumps(effective['multi_tp_levels']) if effective['multi_tp_levels'] else None
            title = f"üéØ MULTI-TP –î–õ–Ø {ticker}"
            back_callback = f"instrument_{ticker}"
            toggle_callback = f"toggle_inst_multi_tp_{ticker}"
            add_callback = f"add_inst_level_{ticker}"
        
        # –ü–∞—Ä—Å–∏–Ω–≥ —É—Ä–æ–≤–Ω–µ–π
        levels = []
        if multi_tp_levels_json:
            try:
                levels = json.loads(multi_tp_levels_json)
            except:
                pass
        
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
        status = "‚úÖ –í–∫–ª—é—á–µ–Ω" if multi_tp_enabled else "‚ùå –í—ã–∫–ª—é—á–µ–Ω"
        
        text = f"{title}\n\n"
        text += f"–°—Ç–∞—Ç—É—Å: {status}\n\n"
        
        if levels:
            text += "–£—Ä–æ–≤–Ω–∏ –≤—ã—Ö–æ–¥–∞:\n"
            text += "‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n"
            for i, level in enumerate(levels, 1):
                level_pct = level.get('level_pct', 0)
                volume_pct = level.get('volume_pct', 0)
                text += f"‚îÇ {i}Ô∏è‚É£ +{level_pct}% ‚Üí {volume_pct}% –ø–æ–∑–∏—Ü–∏–∏\n"
            text += "‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n"
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É–º–º—ã
            total_volume = sum(l.get('volume_pct', 0) for l in levels)
            if abs(total_volume - 100) < 0.01:
                text += "\n‚úÖ –°—É–º–º–∞ —É—Ä–æ–≤–Ω–µ–π: 100%"
            else:
                text += f"\n‚ö†Ô∏è –°—É–º–º–∞ —É—Ä–æ–≤–Ω–µ–π: {total_volume}% (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 100%)"
        else:
            text += "<i>–£—Ä–æ–≤–Ω–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã</i>"
        
        # –ö–Ω–æ–ø–∫–∏
        keyboard = []
        
        if multi_tp_enabled:
            keyboard.append([InlineKeyboardButton("‚ùå –í—ã–∫–ª—é—á–∏—Ç—å Multi-TP", callback_data=toggle_callback)])
            if levels:
                keyboard.append([InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å", callback_data=f"edit_level_menu_{ticker if ticker else 'global'}")])
                keyboard.append([InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å", callback_data=f"delete_level_menu_{ticker if ticker else 'global'}")])
            if len(levels) < 10:
                keyboard.append([InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å", callback_data=add_callback)])
        else:
            keyboard.append([InlineKeyboardButton("‚úÖ –í–∫–ª—é—á–∏—Ç—å Multi-TP", callback_data=toggle_callback)])
        
        keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=back_callback)])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            text=text,
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
        
        # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç
        context.user_data['multi_tp_context'] = {
            'is_global': is_global,
            'ticker': ticker
        }
        
        return MULTI_TP_MENU
    
    async def toggle_multi_tp(self, update: Update, context: ContextTypes.DEFAULT_TYPE, is_global: bool, ticker: str = None):
        """–í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å Multi-TP"""
        query = update.callback_query
        await query.answer()
        
        # –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç
        active_account = await self.db.get_active_account()
        if not active_account:
            await query.edit_message_text("‚ùå –ê–∫—Ç–∏–≤–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return ConversationHandler.END
        
        if is_global:
            settings = await self.settings_manager.get_global_settings(active_account.account_id)
            new_state = not settings.multi_tp_enabled if settings else True
            
            await self.settings_manager.update_global_settings(
                active_account.account_id,
                multi_tp_enabled=new_state
            )
        else:
            inst_settings = await self.settings_manager.get_instrument_settings(active_account.account_id, ticker)
            if inst_settings and inst_settings.multi_tp_enabled is not None:
                new_state = not inst_settings.multi_tp_enabled
            else:
                # –ü–æ–ª—É—á–∏—Ç—å –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö
                global_settings = await self.settings_manager.get_global_settings(active_account.account_id)
                new_state = not global_settings.multi_tp_enabled if global_settings else True
            
            await self.settings_manager.update_instrument_settings(
                active_account.account_id,
                ticker,
                multi_tp_enabled=new_state
            )
        
        # –ü–æ–∫–∞–∑–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –º–µ–Ω—é
        return await self.show_multi_tp_menu(update, context, is_global, ticker)
    
    async def add_level_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è Multi-TP"""
        query = update.callback_query
        await query.answer()
        
        ctx = context.user_data.get('multi_tp_context', {})
        is_global = ctx.get('is_global', True)
        ticker = ctx.get('ticker')
        
        keyboard = [[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_add_level")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        text = (
            "‚ûï <b>–î–æ–±–∞–≤–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å Multi-TP</b>\n\n"
            "–®–∞–≥ 1/2: –£—Ä–æ–≤–µ–Ω—å —Ü–µ–Ω—ã\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç —Å—Ä–µ–¥–Ω–µ–π —Ü–µ–Ω—ã:\n"
            "–ü—Ä–∏–º–µ—Ä—ã: <code>1.0</code>, <code>2.5</code>, <code>5.0</code>\n\n"
            "–î–∏–∞–ø–∞–∑–æ–Ω: 0.1% - 20%"
        )
        
        await query.edit_message_text(
            text=text,
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
        
        return ADD_LEVEL_PRICE
    
    async def add_level_price(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å —Ü–µ–Ω—ã –∏ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –æ–±—ä–µ–º"""
        try:
            # –ü–∞—Ä—Å–∏–Ω–≥ –∑–Ω–∞—á–µ–Ω–∏—è
            value = float(update.message.text.strip().replace(',', '.'))
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è
            if value < 0.1 or value > 20:
                await update.message.reply_text(
                    "‚ùå –ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 0.1% –¥–æ 20%\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
                )
                return ADD_LEVEL_PRICE
            
            # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
            context.user_data['new_level_price'] = value
            
            # –ó–∞–ø—Ä–æ—Å–∏—Ç—å –æ–±—ä–µ–º
            keyboard = [[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_add_level")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            text = (
                "‚ûï <b>–î–æ–±–∞–≤–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å Multi-TP</b>\n\n"
                f"–£—Ä–æ–≤–µ–Ω—å —Ü–µ–Ω—ã: <b>+{value}%</b> ‚úÖ\n\n"
                "–®–∞–≥ 2/2: –û–±—ä–µ–º –∑–∞–∫—Ä—ã—Ç–∏—è\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è:\n"
                "–ü—Ä–∏–º–µ—Ä—ã: <code>25</code>, <code>50</code>, <code>100</code>\n\n"
                "–î–∏–∞–ø–∞–∑–æ–Ω: 1% - 100%"
            )
            
            await update.message.reply_text(
                text=text,
                reply_markup=reply_markup,
                parse_mode='HTML'
            )
            
            return ADD_LEVEL_VOLUME
            
        except ValueError:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2.5):"
            )
            return ADD_LEVEL_PRICE
    
    async def add_level_volume(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ–±—ä–µ–º –∏ –¥–æ–±–∞–≤–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å"""
        try:
            # –ü–∞—Ä—Å–∏–Ω–≥ –∑–Ω–∞—á–µ–Ω–∏—è
            value = float(update.message.text.strip().replace(',', '.'))
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è
            if value < 1 or value > 100:
                await update.message.reply_text(
                    "‚ùå –ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1% –¥–æ 100%\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
                )
                return ADD_LEVEL_VOLUME
            
            # –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            level_price = context.user_data.get('new_level_price')
            ctx = context.user_data.get('multi_tp_context', {})
            is_global = ctx.get('is_global', True)
            ticker = ctx.get('ticker')
            
            # –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç
            active_account = await self.db.get_active_account()
            if not active_account:
                await update.message.reply_text("‚ùå –ê–∫—Ç–∏–≤–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return ConversationHandler.END
            
            # –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–µ —É—Ä–æ–≤–Ω–∏
            if is_global:
                settings = await self.settings_manager.get_global_settings(active_account.account_id)
                current_levels = json.loads(settings.multi_tp_levels) if settings and settings.multi_tp_levels else []
            else:
                effective = await self.settings_manager.get_effective_settings(active_account.account_id, ticker)
                current_levels = effective['multi_tp_levels']
            
            # –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å
            new_level = {
                'level_pct': level_price,
                'volume_pct': value
            }
            current_levels.append(new_level)
            
            # –°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ level_pct
            current_levels.sort(key=lambda x: x['level_pct'])
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è
            valid, error = self.settings_manager.validate_multi_tp_levels(current_levels)
            if not valid:
                await update.message.reply_text(
                    f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {error}\n\n"
                    "–£—Ä–æ–≤–µ–Ω—å –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è."
                )
                
                # –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é
                keyboard = [
                    [InlineKeyboardButton("üéØ Multi-TP", callback_data="show_multi_tp")],
                    [InlineKeyboardButton("‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await update.message.reply_text(
                    "‚öôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                    reply_markup=reply_markup
                )
                
                return MAIN_MENU
            
            # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
            if is_global:
                await self.settings_manager.update_global_settings(
                    active_account.account_id,
                    multi_tp_levels=current_levels
                )
            else:
                await self.settings_manager.update_instrument_settings(
                    active_account.account_id,
                    ticker,
                    multi_tp_levels=current_levels
                )
            
            await update.message.reply_text(
                f"‚úÖ –£—Ä–æ–≤–µ–Ω—å –¥–æ–±–∞–≤–ª–µ–Ω: <b>+{level_price}% ‚Üí {value}%</b>\n\n"
                "–í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –º–µ–Ω—é Multi-TP...",
                parse_mode='HTML'
            )
            
            # –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é
            keyboard = [
                [InlineKeyboardButton("üéØ Multi-TP", callback_data="show_multi_tp")],
                [InlineKeyboardButton("‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                "‚öôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=reply_markup
            )
            
            return MAIN_MENU
            
        except ValueError:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 25):"
            )
            return ADD_LEVEL_VOLUME
    
    # ==================== –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –£–†–û–í–ù–ï–ô MULTI-TP ====================
    
    async def edit_level_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —É—Ä–æ–≤–Ω—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        query = update.callback_query
        await query.answer()
        
        ctx = context.user_data.get('multi_tp_context', {})
        is_global = ctx.get('is_global', True)
        ticker = ctx.get('ticker')
        
        # –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç
        active_account = await self.db.get_active_account()
        if not active_account:
            await query.edit_message_text("‚ùå –ê–∫—Ç–∏–≤–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return ConversationHandler.END
        
        # –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–µ —É—Ä–æ–≤–Ω–∏
        if is_global:
            settings = await self.settings_manager.get_global_settings(active_account.account_id)
            levels = json.loads(settings.multi_tp_levels) if settings and settings.multi_tp_levels else []
        else:
            effective = await self.settings_manager.get_effective_settings(active_account.account_id, ticker)
            levels = effective['multi_tp_levels'] if effective['multi_tp_levels'] else []
        
        if not levels:
            await query.answer("‚ùå –ù–µ—Ç —É—Ä–æ–≤–Ω–µ–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", show_alert=True)
            return await self.show_multi_tp_menu(update, context, is_global, ticker)
        
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
        keyboard = []
        for i, level in enumerate(levels):
            level_pct = level.get('level_pct', 0)
            volume_pct = level.get('volume_pct', 0)
            keyboard.append([
                InlineKeyboardButton(
                    f"{i+1}Ô∏è‚É£ +{level_pct}% ‚Üí {volume_pct}%",
                    callback_data=f"edit_level_{i}_{ticker if ticker else 'global'}"
                )
            ])
        
        keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="show_multi_tp")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        text = (
            "‚úèÔ∏è <b>–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</b>\n\n"
            "–¢–µ–∫—É—â–∏–µ —É—Ä–æ–≤–Ω–∏:"
        )
        
        await query.edit_message_text(
            text=text,
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
        
        return EDIT_LEVEL
    
    async def edit_level_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE, level_index: int):
        """–ù–∞—á–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Ä–æ–≤–Ω—è"""
        query = update.callback_query
        await query.answer()
        
        ctx = context.user_data.get('multi_tp_context', {})
        is_global = ctx.get('is_global', True)
        ticker = ctx.get('ticker')
        
        # –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç
        active_account = await self.db.get_active_account()
        if not active_account:
            await query.edit_message_text("‚ùå –ê–∫—Ç–∏–≤–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return ConversationHandler.END
        
        # –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–µ —É—Ä–æ–≤–Ω–∏
        if is_global:
            settings = await self.settings_manager.get_global_settings(active_account.account_id)
            levels = json.loads(settings.multi_tp_levels) if settings and settings.multi_tp_levels else []
        else:
            effective = await self.settings_manager.get_effective_settings(active_account.account_id, ticker)
            levels = effective['multi_tp_levels'] if effective['multi_tp_levels'] else []
        
        if level_index >= len(levels):
            await query.answer("‚ùå –£—Ä–æ–≤–µ–Ω—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return await self.show_multi_tp_menu(update, context, is_global, ticker)
        
        level = levels[level_index]
        current_price = level.get('level_pct', 0)
        current_volume = level.get('volume_pct', 0)
        
        keyboard = [[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_edit_level")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        text = (
            f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Ä–æ–≤–Ω—è {level_index + 1}</b>\n\n"
            f"–¢–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è:\n"
            f"  –£—Ä–æ–≤–µ–Ω—å —Ü–µ–Ω—ã: <b>+{current_price}%</b>\n"
            f"  –û–±—ä–µ–º –∑–∞–∫—Ä—ã—Ç–∏—è: <b>{current_volume}%</b>\n\n"
            "–®–∞–≥ 1/2: –ù–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å —Ü–µ–Ω—ã\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç —Å—Ä–µ–¥–Ω–µ–π —Ü–µ–Ω—ã:\n"
            "–ü—Ä–∏–º–µ—Ä—ã: <code>1.0</code>, <code>2.5</code>, <code>5.0</code>\n\n"
            "–î–∏–∞–ø–∞–∑–æ–Ω: 0.1% - 20%"
        )
        
        await query.edit_message_text(
            text=text,
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
        
        # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç
        context.user_data['editing_level_index'] = level_index
        
        return EDIT_LEVEL_PRICE
    
    async def edit_level_price_save(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å —Ü–µ–Ω—ã –∏ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –æ–±—ä–µ–º"""
        try:
            # –ü–∞—Ä—Å–∏–Ω–≥ –∑–Ω–∞—á–µ–Ω–∏—è
            value = float(update.message.text.strip().replace(',', '.'))
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è
            if value < 0.1 or value > 20:
                await update.message.reply_text(
                    "‚ùå –ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 0.1% –¥–æ 20%\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
                )
                return EDIT_LEVEL_PRICE
            
            # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
            context.user_data['edit_level_price'] = value
            
            level_index = context.user_data.get('editing_level_index', 0)
            
            # –ó–∞–ø—Ä–æ—Å–∏—Ç—å –æ–±—ä–µ–º
            keyboard = [[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_edit_level")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            text = (
                f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Ä–æ–≤–Ω—è {level_index + 1}</b>\n\n"
                f"–ù–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å —Ü–µ–Ω—ã: <b>+{value}%</b> ‚úÖ\n\n"
                "–®–∞–≥ 2/2: –ù–æ–≤—ã–π –æ–±—ä–µ–º –∑–∞–∫—Ä—ã—Ç–∏—è\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è:\n"
                "–ü—Ä–∏–º–µ—Ä—ã: <code>25</code>, <code>50</code>, <code>100</code>\n\n"
                "–î–∏–∞–ø–∞–∑–æ–Ω: 1% - 100%"
            )
            
            await update.message.reply_text(
                text=text,
                reply_markup=reply_markup,
                parse_mode='HTML'
            )
            
            return EDIT_LEVEL_VOLUME
            
        except ValueError:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2.5):"
            )
            return EDIT_LEVEL_PRICE
    
    async def edit_level_volume_save(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–æ–≤—ã–π –æ–±—ä–µ–º –∏ –æ–±–Ω–æ–≤–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å"""
        try:
            # –ü–∞—Ä—Å–∏–Ω–≥ –∑–Ω–∞—á–µ–Ω–∏—è
            value = float(update.message.text.strip().replace(',', '.'))
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è
            if value < 1 or value > 100:
                await update.message.reply_text(
                    "‚ùå –ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1% –¥–æ 100%\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
                )
                return EDIT_LEVEL_VOLUME
            
            # –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            level_index = context.user_data.get('editing_level_index', 0)
            level_price = context.user_data.get('edit_level_price')
            ctx = context.user_data.get('multi_tp_context', {})
            is_global = ctx.get('is_global', True)
            ticker = ctx.get('ticker')
            
            # –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç
            active_account = await self.db.get_active_account()
            if not active_account:
                await update.message.reply_text("‚ùå –ê–∫—Ç–∏–≤–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return ConversationHandler.END
            
            # –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–µ —É—Ä–æ–≤–Ω–∏
            if is_global:
                settings = await self.settings_manager.get_global_settings(active_account.account_id)
                current_levels = json.loads(settings.multi_tp_levels) if settings and settings.multi_tp_levels else []
            else:
                effective = await self.settings_manager.get_effective_settings(active_account.account_id, ticker)
                current_levels = effective['multi_tp_levels'] if effective['multi_tp_levels'] else []
            
            if level_index >= len(current_levels):
                await update.message.reply_text("‚ùå –£—Ä–æ–≤–µ–Ω—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return ConversationHandler.END
            
            # –û–±–Ω–æ–≤–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å
            current_levels[level_index] = {
                'level_pct': level_price,
                'volume_pct': value
            }
            
            # –°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ level_pct
            current_levels.sort(key=lambda x: x['level_pct'])
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è
            valid, error = self.settings_manager.validate_multi_tp_levels(current_levels)
            if not valid:
                await update.message.reply_text(
                    f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {error}\n\n"
                    "–ò–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã."
                )
                
                # –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é
                keyboard = [
                    [InlineKeyboardButton("üéØ Multi-TP", callback_data="show_multi_tp")],
                    [InlineKeyboardButton("‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await update.message.reply_text(
                    "‚öôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                    reply_markup=reply_markup
                )
                
                return MAIN_MENU
            
            # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
            if is_global:
                await self.settings_manager.update_global_settings(
                    active_account.account_id,
                    multi_tp_levels=current_levels
                )
            else:
                await self.settings_manager.update_instrument_settings(
                    active_account.account_id,
                    ticker,
                    multi_tp_levels=current_levels
                )
            
            await update.message.reply_text(
                f"‚úÖ –£—Ä–æ–≤–µ–Ω—å {level_index + 1} –æ–±–Ω–æ–≤–ª–µ–Ω: <b>+{level_price}% ‚Üí {value}%</b>\n\n"
                "–í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –º–µ–Ω—é Multi-TP...",
                parse_mode='HTML'
            )
            
            # –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é
            keyboard = [
                [InlineKeyboardButton("üéØ Multi-TP", callback_data="show_multi_tp")],
                [InlineKeyboardButton("‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                "‚öôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=reply_markup
            )
            
            return MAIN_MENU
            
        except ValueError:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 25):"
            )
            return EDIT_LEVEL_VOLUME
    
    # ==================== –£–î–ê–õ–ï–ù–ò–ï –£–†–û–í–ù–ï–ô MULTI-TP ====================
    
    async def delete_level_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —É—Ä–æ–≤–Ω—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""
        query = update.callback_query
        await query.answer()
        
        ctx = context.user_data.get('multi_tp_context', {})
        is_global = ctx.get('is_global', True)
        ticker = ctx.get('ticker')
        
        # –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç
        active_account = await self.db.get_active_account()
        if not active_account:
            await query.edit_message_text("‚ùå –ê–∫—Ç–∏–≤–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return ConversationHandler.END
        
        # –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–µ —É—Ä–æ–≤–Ω–∏
        if is_global:
            settings = await self.settings_manager.get_global_settings(active_account.account_id)
            levels = json.loads(settings.multi_tp_levels) if settings and settings.multi_tp_levels else []
        else:
            effective = await self.settings_manager.get_effective_settings(active_account.account_id, ticker)
            levels = effective['multi_tp_levels'] if effective['multi_tp_levels'] else []
        
        if not levels:
            await query.answer("‚ùå –ù–µ—Ç —É—Ä–æ–≤–Ω–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è", show_alert=True)
            return await self.show_multi_tp_menu(update, context, is_global, ticker)
        
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
        keyboard = []
        for i, level in enumerate(levels):
            level_pct = level.get('level_pct', 0)
            volume_pct = level.get('volume_pct', 0)
            keyboard.append([
                InlineKeyboardButton(
                    f"üóëÔ∏è {i+1}Ô∏è‚É£ +{level_pct}% ‚Üí {volume_pct}%",
                    callback_data=f"delete_level_{i}_{ticker if ticker else 'global'}"
                )
            ])
        
        keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="show_multi_tp")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        text = (
            "üóëÔ∏è <b>–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è</b>\n\n"
            "–¢–µ–∫—É—â–∏–µ —É—Ä–æ–≤–Ω–∏:"
        )
        
        await query.edit_message_text(
            text=text,
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
        
        return DELETE_LEVEL
    
    async def delete_level_confirm(self, update: Update, context: ContextTypes.DEFAULT_TYPE, level_index: int):
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è"""
        query = update.callback_query
        await query.answer()
        
        ctx = context.user_data.get('multi_tp_context', {})
        is_global = ctx.get('is_global', True)
        ticker = ctx.get('ticker')
        
        # –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç
        active_account = await self.db.get_active_account()
        if not active_account:
            await query.edit_message_text("‚ùå –ê–∫—Ç–∏–≤–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return ConversationHandler.END
        
        # –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–µ —É—Ä–æ–≤–Ω–∏
        if is_global:
            settings = await self.settings_manager.get_global_settings(active_account.account_id)
            levels = json.loads(settings.multi_tp_levels) if settings and settings.multi_tp_levels else []
        else:
            effective = await self.settings_manager.get_effective_settings(active_account.account_id, ticker)
            levels = effective['multi_tp_levels'] if effective['multi_tp_levels'] else []
        
        if level_index >= len(levels):
            await query.answer("‚ùå –£—Ä–æ–≤–µ–Ω—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return await self.show_multi_tp_menu(update, context, is_global, ticker)
        
        level = levels[level_index]
        level_pct = level.get('level_pct', 0)
        volume_pct = level.get('volume_pct', 0)
        
        keyboard = [
            [InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_{level_index}_{ticker if ticker else 'global'}")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="show_multi_tp")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        text = (
            "üóëÔ∏è <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è</b>\n\n"
            f"–£–¥–∞–ª–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å {level_index + 1}?\n"
            f"  –£—Ä–æ–≤–µ–Ω—å —Ü–µ–Ω—ã: <b>+{level_pct}%</b>\n"
            f"  –û–±—ä–µ–º –∑–∞–∫—Ä—ã—Ç–∏—è: <b>{volume_pct}%</b>\n\n"
            "‚ö†Ô∏è –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å"
        )
        
        await query.edit_message_text(
            text=text,
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
        
        # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç
        context.user_data['deleting_level_index'] = level_index
        
        return DELETE_LEVEL
    
    async def delete_level_execute(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è"""
        query = update.callback_query
        await query.answer()
        
        level_index = context.user_data.get('deleting_level_index', 0)
        ctx = context.user_data.get('multi_tp_context', {})
        is_global = ctx.get('is_global', True)
        ticker = ctx.get('ticker')
        
        # –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç
        active_account = await self.db.get_active_account()
        if not active_account:
            await query.edit_message_text("‚ùå –ê–∫—Ç–∏–≤–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return ConversationHandler.END
        
        # –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–µ —É—Ä–æ–≤–Ω–∏
        if is_global:
            settings = await self.settings_manager.get_global_settings(active_account.account_id)
            current_levels = json.loads(settings.multi_tp_levels) if settings and settings.multi_tp_levels else []
        else:
            effective = await self.settings_manager.get_effective_settings(active_account.account_id, ticker)
            current_levels = effective['multi_tp_levels'] if effective['multi_tp_levels'] else []
        
        if level_index >= len(current_levels):
            await query.answer("‚ùå –£—Ä–æ–≤–µ–Ω—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return await self.show_multi_tp_menu(update, context, is_global, ticker)
        
        # –£–¥–∞–ª–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å
        deleted_level = current_levels.pop(level_index)
        
        # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
        if is_global:
            await self.settings_manager.update_global_settings(
                active_account.account_id,
                multi_tp_levels=current_levels if current_levels else None
            )
        else:
            await self.settings_manager.update_instrument_settings(
                active_account.account_id,
                ticker,
                multi_tp_levels=current_levels if current_levels else None
            )
        
        await query.answer(
            f"‚úÖ –£—Ä–æ–≤–µ–Ω—å {level_index + 1} —É–¥–∞–ª–µ–Ω (+{deleted_level['level_pct']}% ‚Üí {deleted_level['volume_pct']}%)",
            show_alert=True
        )
        
        # –ü–æ–∫–∞–∑–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –º–µ–Ω—é
        return await self.show_multi_tp_menu(update, context, is_global, ticker)
    
    # ==================== –û–¢–ú–ï–ù–ê ====================
    
    async def cancel(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–º–µ–Ω–∞ –∏ –≤—ã—Ö–æ–¥ –∏–∑ –º–µ–Ω—é"""
        if update.callback_query:
            await update.callback_query.edit_message_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
        else:
            await update.message.reply_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
        
        return ConversationHandler.END
