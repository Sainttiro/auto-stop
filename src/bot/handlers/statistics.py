"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
"""

from datetime import datetime, timezone
from telegram import Update
from telegram.ext import ContextTypes

from src.bot.handlers.base import BaseHandler
from src.utils.logger import get_logger

logger = get_logger("bot.handlers.statistics")


class StatisticsHandler(BaseHandler):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
    
    –ö–æ–º–∞–Ω–¥—ã:
    - /stats [–ø–µ—Ä–∏–æ–¥] [–≥–æ–¥] - –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    - /stats_detailed - –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
    - /stats_instrument <ticker> [–ø–µ—Ä–∏–æ–¥] - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—É
    """
    
    async def cmd_stats(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats [–ø–µ—Ä–∏–æ–¥] [–≥–æ–¥]"""
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            if not self._check_auth(update):
                await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
                return
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
            if not self.operations_cache or not self.statistics_calculator or not self.report_formatter:
                await update.message.reply_text(
                    "‚ùå <b>–ú–æ–¥—É–ª—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</b>\n\n"
                    "–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã.",
                    parse_mode='HTML'
                )
                return
            
            # –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
            period = "month"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
            start_year = datetime.now().year  # –¢–µ–∫—É—â–∏–π –≥–æ–¥
            
            if len(context.args) >= 1:
                period_arg = context.args[0].lower()
                if period_arg in ["month", "week", "day"]:
                    period = period_arg
                else:
                    await update.message.reply_text(
                        "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π –ø–µ—Ä–∏–æ–¥</b>\n\n"
                        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã: month, week, day",
                        parse_mode='HTML'
                    )
                    return
            
            if len(context.args) >= 2:
                try:
                    start_year = int(context.args[1])
                    if start_year < 2020 or start_year > 2030:
                        raise ValueError("–ì–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 2020-2030")
                except ValueError as e:
                    await update.message.reply_text(
                        f"‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π –≥–æ–¥</b>\n\n{str(e)}",
                        parse_mode='HTML'
                    )
                    return
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            processing_msg = await update.message.reply_text(
                "‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...",
                parse_mode='HTML'
            )
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
            active_account = await self.db.get_active_account()
            if not active_account:
                await processing_msg.edit_text(
                    "‚ùå –ê–∫—Ç–∏–≤–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω",
                    parse_mode='HTML'
                )
                return
            
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞—Ç
            from_date = datetime(start_year, 1, 1, tzinfo=timezone.utc)
            to_date = datetime.now(timezone.utc)
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
            operations = await self.operations_cache.get_operations(
                account_id=active_account.account_id,
                from_date=from_date,
                to_date=to_date
            )
            
            if not operations:
                await processing_msg.edit_text(
                    f"üì≠ <b>–ù–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–π –∑–∞ {start_year} –≥–æ–¥</b>",
                    parse_mode='HTML'
                )
                return
            
            # –†–∞—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            stats = self.statistics_calculator.calculate_statistics(operations, period=period)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
            report = self.report_formatter.format_report(stats, period=period, start_year=start_year)
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ (–º–æ–∂–µ—Ç –±—ã—Ç—å –¥–ª–∏–Ω–Ω—ã–º, —Ä–∞–∑–±–∏–≤–∞–µ–º –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
            if len(report) > 4096:
                # Telegram –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
                parts = [report[i:i+4096] for i in range(0, len(report), 4096)]
                await processing_msg.delete()
                for part in parts:
                    await update.message.reply_text(part, parse_mode='HTML')
            else:
                await processing_msg.edit_text(report, parse_mode='HTML')
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ cmd_stats: {e}", exc_info=True)
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    
    async def cmd_stats_detailed(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats_detailed - –¥–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–¥–µ–ª–æ–∫ –∑–∞ —Å–µ–≥–æ–¥–Ω—è"""
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            if not self._check_auth(update):
                await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
                return
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
            if not self.operations_cache or not self.statistics_calculator or not self.report_formatter:
                await update.message.reply_text(
                    "‚ùå <b>–ú–æ–¥—É–ª—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</b>\n\n"
                    "–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã.",
                    parse_mode='HTML'
                )
                return
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            processing_msg = await update.message.reply_text(
                "‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏ —Ñ–æ—Ä–º–∏—Ä—É—é –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç...",
                parse_mode='HTML'
            )
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
            active_account = await self.db.get_active_account()
            if not active_account:
                await processing_msg.edit_text(
                    "‚ùå –ê–∫—Ç–∏–≤–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω",
                    parse_mode='HTML'
                )
                return
            
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞—Ç (—Ç–æ–ª—å–∫–æ —Å–µ–≥–æ–¥–Ω—è)
            today = datetime.now(timezone.utc).replace(hour=0, minute=0, second=0, microsecond=0)
            from_date = today
            to_date = datetime.now(timezone.utc)
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
            operations = await self.operations_cache.get_operations(
                account_id=active_account.account_id,
                from_date=from_date,
                to_date=to_date
            )
            
            if not operations:
                await processing_msg.edit_text(
                    "üì≠ <b>–ù–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è</b>",
                    parse_mode='HTML'
                )
                return
            
            # –†–∞—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            stats = self.statistics_calculator.calculate_statistics(operations, period="day")
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
            report = self.report_formatter.format_detailed_report(
                stats, 
                operations=operations,
                period="day",
                start_year=datetime.now().year
            )
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ (–º–æ–∂–µ—Ç –±—ã—Ç—å –¥–ª–∏–Ω–Ω—ã–º, —Ä–∞–∑–±–∏–≤–∞–µ–º –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
            if len(report) > 4096:
                # Telegram –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
                parts = [report[i:i+4096] for i in range(0, len(report), 4096)]
                await processing_msg.delete()
                for part in parts:
                    await update.message.reply_text(part, parse_mode='HTML')
            else:
                await processing_msg.edit_text(report, parse_mode='HTML')
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ cmd_stats_detailed: {e}", exc_info=True)
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    
    async def cmd_stats_instrument(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats_instrument <ticker> [–ø–µ—Ä–∏–æ–¥]"""
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            if not self._check_auth(update):
                await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
                return
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
            if not self.operations_cache or not self.statistics_calculator or not self.report_formatter:
                await update.message.reply_text(
                    "‚ùå <b>–ú–æ–¥—É–ª—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</b>\n\n"
                    "–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã.",
                    parse_mode='HTML'
                )
                return
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
            if not context.args:
                await update.message.reply_text(
                    "‚ùå <b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b>\n"
                    "<code>/stats_instrument &lt;ticker&gt; [–ø–µ—Ä–∏–æ–¥]</code>\n\n"
                    "<b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n"
                    "‚Ä¢ /stats_instrument SBER\n"
                    "‚Ä¢ /stats_instrument GAZP week\n"
                    "‚Ä¢ /stats_instrument YNDX month",
                    parse_mode='HTML'
                )
                return
            
            # –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
            ticker = context.args[0].upper()
            period = "month"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
            
            if len(context.args) >= 2:
                period_arg = context.args[1].lower()
                if period_arg in ["month", "week", "day"]:
                    period = period_arg
                else:
                    await update.message.reply_text(
                        "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π –ø–µ—Ä–∏–æ–¥</b>\n\n"
                        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã: month, week, day",
                        parse_mode='HTML'
                    )
                    return
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            processing_msg = await update.message.reply_text(
                f"‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ <b>{ticker}</b>...",
                parse_mode='HTML'
            )
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
            active_account = await self.db.get_active_account()
            if not active_account:
                await processing_msg.edit_text(
                    "‚ùå –ê–∫—Ç–∏–≤–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω",
                    parse_mode='HTML'
                )
                return
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π –∑–∞ —Ç–µ–∫—É—â–∏–π –≥–æ–¥
            from_date = datetime(datetime.now(timezone.utc).year, 1, 1, tzinfo=timezone.utc)
            to_date = datetime.now(timezone.utc)
            
            operations = await self.operations_cache.get_operations(
                account_id=active_account.account_id,
                from_date=from_date,
                to_date=to_date
            )
            
            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ç–∏–∫–µ—Ä—É
            instrument_operations = [op for op in operations if op.get('ticker') == ticker]
            
            if not instrument_operations:
                await processing_msg.edit_text(
                    f"üì≠ <b>–ù–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–π –ø–æ {ticker}</b>\n\n"
                    f"–ó–∞ –ø–µ—Ä–∏–æ–¥: {from_date.strftime('%d.%m.%Y')} - {to_date.strftime('%d.%m.%Y')}",
                    parse_mode='HTML'
                )
                return
            
            # –†–∞—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            stats = self.statistics_calculator.calculate_statistics(instrument_operations, period=period)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
            report = self.report_formatter.format_instrument_report(
                stats, 
                ticker=ticker, 
                period=period,
                start_year=datetime.now().year
            )
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞
            if len(report) > 4096:
                parts = [report[i:i+4096] for i in range(0, len(report), 4096)]
                await processing_msg.delete()
                for part in parts:
                    await update.message.reply_text(part, parse_mode='HTML')
            else:
                await processing_msg.edit_text(report, parse_mode='HTML')
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ cmd_stats_instrument: {e}", exc_info=True)
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
