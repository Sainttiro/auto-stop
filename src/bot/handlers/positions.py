"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–∑–∏—Ü–∏—è–º–∏
"""

from telegram import Update
from telegram.ext import ContextTypes

from src.bot.handlers.base import BaseHandler
from src.utils.logger import get_logger

logger = get_logger("bot.handlers.positions")


class PositionsHandler(BaseHandler):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–∑–∏—Ü–∏—è–º–∏
    
    –ö–æ–º–∞–Ω–¥—ã:
    - /positions - –°–ø–∏—Å–æ–∫ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π
    """
    
    async def cmd_positions(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /positions"""
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            if not self._check_auth(update):
                await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
                return
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π
            positions = await self.db.get_open_positions()
            
            if not positions:
                await update.message.reply_text("üì≠ –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π")
                return
            
            text = "üìà <b>–û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏</b>\n\n"
            
            for pos in positions:
                direction_emoji = "üü¢" if pos.direction == "BUY" else "üî¥"
                text += (
                    f"{direction_emoji} <b>{pos.ticker}</b>\n"
                    f"  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {pos.quantity}\n"
                    f"  –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {pos.average_price:.2f}\n"
                    f"  –¢–∏–ø: {pos.instrument_type}\n\n"
                )
            
            await update.message.reply_text(text, parse_mode='HTML')
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ cmd_positions: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
