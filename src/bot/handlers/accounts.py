"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏
"""

from telegram import Update
from telegram.ext import ContextTypes

from src.bot.handlers.base import BaseHandler
from src.utils.logger import get_logger

logger = get_logger("bot.handlers.accounts")


class AccountsHandler(BaseHandler):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏
    
    –ö–æ–º–∞–Ω–¥—ã:
    - /accounts - –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
    - /add_account - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç
    - /switch_account - –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç
    - /current_account - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç
    - /remove_account - –£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç
    """
    
    async def cmd_accounts(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /accounts - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            if not self._check_auth(update):
                await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
                return
            
            accounts = await self.db.get_all_accounts()
            
            if not accounts:
                await update.message.reply_text("üì≠ –ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
                return
            
            text = "üìä <b>–°—á–µ—Ç–∞ Tinkoff</b>\n\n"
            
            for acc in accounts:
                status = "üü¢" if acc.is_active else "‚ö™"
                active_label = " (–∞–∫—Ç–∏–≤–Ω—ã–π)" if acc.is_active else ""
                last_used = acc.last_used_at.strftime('%d.%m.%Y %H:%M') if acc.last_used_at else "–Ω–∏–∫–æ–≥–¥–∞"
                
                text += (
                    f"{status} <b>{acc.name}</b>{active_label}\n"
                    f"   üÜî ID: <code>{acc.account_id}</code>\n"
                    f"   üìÑ {acc.description or '–±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}\n"
                    f"   üïê –ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: {last_used}\n\n"
                )
            
            await update.message.reply_text(text, parse_mode='HTML')
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ cmd_accounts: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    
    async def cmd_add_account(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /add_account - –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç"""
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            if not self._check_auth(update):
                await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
                return
            
            # –£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–æ–∫–µ–Ω–æ–º
            try:
                await update.message.delete()
            except:
                pass
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
            if len(context.args) < 3:
                await self.send_message(
                    "‚ùå <b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b>\n"
                    "<code>/add_account –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω account_id [–æ–ø–∏—Å–∞–Ω–∏–µ]</code>\n\n"
                    "<b>–ü—Ä–∏–º–µ—Ä:</b>\n"
                    "<code>/add_account main t.xxx... 2000012345 –û—Å–Ω–æ–≤–Ω–æ–π —Å—á–µ—Ç</code>\n\n"
                    "‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–æ–∫–µ–Ω–æ–º –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–µ–Ω–æ"
                )
                return
            
            name = context.args[0]
            token = context.args[1]
            account_id = context.args[2]
            description = " ".join(context.args[3:]) if len(context.args) > 3 else None
            
            # –î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç –≤ –ë–î
            account = await self.db.add_account(name, token, account_id, description)
            
            await self.send_message(
                f"‚úÖ <b>–ê–∫–∫–∞—É–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω!</b>\n\n"
                f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: <b>{name}</b>\n"
                f"üÜî Account ID: <code>{account_id}</code>\n"
                f"üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: {description or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n\n"
                f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ <code>/switch_account {name}</code> –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è"
            )
            
        except ValueError as e:
            await self.send_message(f"‚ùå {str(e)}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ cmd_add_account: {e}")
            await self.send_message(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    
    async def cmd_switch_account(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /switch_account - –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç"""
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            if not self._check_auth(update):
                await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
                return
            
            if not context.args:
                await update.message.reply_text(
                    "‚ùå <b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b> <code>/switch_account –Ω–∞–∑–≤–∞–Ω–∏–µ</code>",
                    parse_mode='HTML'
                )
                return
            
            account_name = context.args[0]
            
            # –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
            await update.message.reply_text(
                f"üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞—é—Å—å –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç <b>{account_name}</b>...\n"
                f"‚è≥ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API...",
                parse_mode='HTML'
            )
            
            # –í—ã–∑–≤–∞—Ç—å –≥–æ—Ä—è—á–µ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            if self.system_control and hasattr(self.system_control, 'reload_api_client'):
                await self.system_control.reload_api_client(account_name)
                
                # –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–≤–æ–º –∞–∫—Ç–∏–≤–Ω–æ–º –∞–∫–∫–∞—É–Ω—Ç–µ
                account = await self.db.get_active_account()
                
                await self.send_message(
                    f"‚úÖ <b>–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!</b>\n\n"
                    f"üü¢ –ê–∫—Ç–∏–≤–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç: <b>{account.name}</b>\n"
                    f"üÜî Account ID: <code>{account.account_id}</code>\n"
                    f"üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: {account.description or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n\n"
                    f"üîÑ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞!"
                )
            else:
                await update.message.reply_text("‚ùå –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
                
        except ValueError as e:
            await self.send_message(f"‚ùå {str(e)}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ cmd_switch_account: {e}")
            await self.send_message(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏: {str(e)}")
    
    async def cmd_current_account(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /current_account - –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç"""
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            if not self._check_auth(update):
                await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
                return
            
            account = await self.db.get_active_account()
            
            if not account:
                await update.message.reply_text("‚ùå –ê–∫—Ç–∏–≤–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            last_used = account.last_used_at.strftime('%d.%m.%Y %H:%M:%S') if account.last_used_at else "–Ω–∏–∫–æ–≥–¥–∞"
            
            text = (
                f"üü¢ <b>–ê–∫—Ç–∏–≤–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç</b>\n\n"
                f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: <b>{account.name}</b>\n"
                f"üÜî Account ID: <code>{account.account_id}</code>\n"
                f"üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: {account.description or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
                f"üïê –ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: {last_used}\n"
                f"üìÖ –°–æ–∑–¥–∞–Ω: {account.created_at.strftime('%d.%m.%Y %H:%M')}"
            )
            
            await update.message.reply_text(text, parse_mode='HTML')
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ cmd_current_account: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    
    async def cmd_remove_account(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /remove_account - —É–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç"""
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            if not self._check_auth(update):
                await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
                return
            
            if not context.args:
                await update.message.reply_text(
                    "‚ùå <b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b> <code>/remove_account –Ω–∞–∑–≤–∞–Ω–∏–µ</code>",
                    parse_mode='HTML'
                )
                return
            
            account_name = context.args[0]
            
            # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω–µ –∞–∫—Ç–∏–≤–Ω—ã–π –ª–∏ —ç—Ç–æ –∞–∫–∫–∞—É–Ω—Ç
            account = await self.db.get_account_by_name(account_name)
            if not account:
                await update.message.reply_text(f"‚ùå –ê–∫–∫–∞—É–Ω—Ç '{account_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            if account.is_active:
                await update.message.reply_text(
                    f"‚ö†Ô∏è <b>–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç!</b>\n"
                    f"–°–Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç–µ—Å—å –Ω–∞ –¥—Ä—É–≥–æ–π –∞–∫–∫–∞—É–Ω—Ç.",
                    parse_mode='HTML'
                )
                return
            
            # –£–¥–∞–ª–∏—Ç—å
            success = await self.db.remove_account(account_name)
            
            if success:
                await update.message.reply_text(
                    f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç <b>{account_name}</b> —É–¥–∞–ª–µ–Ω",
                    parse_mode='HTML'
                )
            else:
                await update.message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç")
                
        except ValueError as e:
            await update.message.reply_text(f"‚ùå {str(e)}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ cmd_remove_account: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
