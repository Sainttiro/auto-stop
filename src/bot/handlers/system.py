"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ Telegram –±–æ—Ç–∞
"""

from datetime import datetime
from telegram import Update
from telegram.ext import ContextTypes

from src.bot.handlers.base import BaseHandler
from src.utils.logger import get_logger

logger = get_logger("bot.handlers.system")


class SystemHandler(BaseHandler):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
    
    –ö–æ–º–∞–Ω–¥—ã:
    - /start - –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    - /help - –°–ø—Ä–∞–≤–∫–∞
    - /status - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
    - /logs - –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏
    - /set_token - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
    - /stop - –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã
    """
    
    async def cmd_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        await update.message.reply_text(
            "ü§ñ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Auto-Stop Bot!</b>\n\n"
            "–Ø –ø–æ–º–æ–≥—É –≤–∞–º —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–∏—Å—Ç–µ–º–æ–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Å—Ç–æ–ø-–ª–æ—Å—Å–æ–≤ –∏ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–æ–≤.\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/status - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã\n"
            "/positions - –¢–µ–∫—É—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏\n"
            "/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
            "/logs - –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏\n"
            "/help - –°–ø—Ä–∞–≤–∫–∞",
            parse_mode='HTML'
        )
    
    async def cmd_help(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        await update.message.reply_text(
            "üìñ <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º</b>\n\n"
            "<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>\n"
            "/status - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã (uptime, —Å–æ—Å—Ç–æ—è–Ω–∏–µ)\n"
            "/positions - –°–ø–∏—Å–æ–∫ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π\n"
            "/logs - –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è\n\n"
            "<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
            "/stats [–ø–µ—Ä–∏–æ–¥] [–≥–æ–¥] - –¢–æ—Ä–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
            "  ‚Ä¢ –ø–µ—Ä–∏–æ–¥: month, week, day (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: month)\n"
            "  ‚Ä¢ –≥–æ–¥: 2024, 2025 (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: —Ç–µ–∫—É—â–∏–π)\n"
            "  –ü—Ä–∏–º–µ—Ä—ã:\n"
            "  ‚Ä¢ /stats - –º–µ—Å—è—á–Ω–∞—è –∑–∞ —Ç–µ–∫—É—â–∏–π –≥–æ–¥\n"
            "  ‚Ä¢ /stats week - –Ω–µ–¥–µ–ª—å–Ω–∞—è –∑–∞ —Ç–µ–∫—É—â–∏–π –≥–æ–¥\n"
            "  ‚Ä¢ /stats month 2024 - –º–µ—Å—è—á–Ω–∞—è –∑–∞ 2024\n\n"
            "/stats_detailed - –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–¥–µ–ª–æ–∫ –∑–∞ —Å–µ–≥–æ–¥–Ω—è\n"
            "  ‚Ä¢ –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∏–±—ã–ª—å–Ω—ã–µ/—É–±—ã—Ç–æ—á–Ω—ã–µ —Å–¥–µ–ª–∫–∏\n"
            "  ‚Ä¢ –¶–µ–Ω—ã –≤—Ö–æ–¥–∞/–≤—ã—Ö–æ–¥–∞\n"
            "  ‚Ä¢ –û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏\n\n"
            "/stats_instrument {ticker} [–ø–µ—Ä–∏–æ–¥] - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—É\n"
            "  –ü—Ä–∏–º–µ—Ä—ã:\n"
            "  ‚Ä¢ /stats_instrument SBER\n"
            "  ‚Ä¢ /stats_instrument GAZP week\n\n"
            "<b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏:</b>\n"
            "/accounts - –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å—á–µ—Ç–æ–≤\n"
            "/current_account - –¢–µ–∫—É—â–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π —Å—á–µ—Ç\n"
            "/add_account {–Ω–∞–∑–≤–∞–Ω–∏–µ} {—Ç–æ–∫–µ–Ω} {account_id} - –î–æ–±–∞–≤–∏—Ç—å —Å—á–µ—Ç\n"
            "/switch_account {–Ω–∞–∑–≤–∞–Ω–∏–µ} - –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Å—á–µ—Ç (–±–µ–∑ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞!)\n"
            "/remove_account {–Ω–∞–∑–≤–∞–Ω–∏–µ} - –£–¥–∞–ª–∏—Ç—å —Å—á–µ—Ç\n\n"
            "<b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π:</b>\n"
            "/stop - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥\n"
            "/set_token - –û–±–Ω–æ–≤–∏—Ç—å Tinkoff API —Ç–æ–∫–µ–Ω\n\n"
            "<b>–ü—Ä–æ—á–µ–µ:</b>\n"
            "/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
            "üí° <i>–í—Å–µ –∫–æ–º–∞–Ω–¥—ã —Ä–∞–±–æ—Ç–∞—é—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</i>",
            parse_mode='HTML'
        )
    
    async def cmd_status(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status"""
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            if not self._check_auth(update):
                await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
                return
            
            # –†–∞—Å—á–µ—Ç uptime
            uptime = datetime.utcnow() - self.bot.start_time
            hours = int(uptime.total_seconds() // 3600)
            minutes = int((uptime.total_seconds() % 3600) // 60)
            
            status_text = (
                "üìä <b>–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã</b>\n\n"
                f"üü¢ –°—Ç–∞—Ç—É—Å: <b>–†–∞–±–æ—Ç–∞–µ—Ç</b>\n"
                f"‚è± Uptime: <b>{hours}—á {minutes}–º</b>\n"
                f"üìÖ –ó–∞–ø—É—â–µ–Ω–∞: <b>{self.bot.start_time.strftime('%d.%m.%Y %H:%M:%S')} UTC</b>\n"
            )
            
            await update.message.reply_text(status_text, parse_mode='HTML')
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ cmd_status: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    
    async def cmd_logs(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /logs"""
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            if not self._check_auth(update):
                await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
                return
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–±—ã—Ç–∏–π
            events = await self.db.get_recent_events(limit=10)
            
            if not events:
                await update.message.reply_text("üì≠ –ù–µ—Ç —Å–æ–±—ã—Ç–∏–π –≤ –ª–æ–≥–∞—Ö")
                return
            
            text = "üìã <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è</b>\n\n"
            
            for event in events:
                emoji = "‚ÑπÔ∏è" if event.event_type == "INFO" else "‚ö†Ô∏è" if event.event_type == "STREAM_ERROR" else "‚ùå"
                text += (
                    f"{emoji} <code>{event.created_at.strftime('%H:%M:%S')}</code> "
                    f"{event.event_type}\n"
                    f"  {event.description[:100]}\n\n"
                )
            
            await update.message.reply_text(text, parse_mode='HTML')
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ cmd_logs: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    
    async def cmd_set_token(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /set_token"""
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            if not self._check_auth(update):
                await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
                return
            
            # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–æ–∫–µ–Ω–æ–º –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            try:
                await update.message.delete()
            except:
                pass
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
            if not context.args or len(context.args) == 0:
                await self.send_message(
                    "‚ùå <b>–û—à–∏–±–∫–∞</b>\n\n"
                    "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <code>/set_token –ù–û–í–´–ô_–¢–û–ö–ï–ù</code>\n\n"
                    "‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–æ–∫–µ–Ω–æ–º –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–µ–Ω–æ"
                )
                return
            
            new_token = context.args[0]
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            await self.db.set_setting(
                key="tinkoff_token",
                value=new_token,
                description="Tinkoff API —Ç–æ–∫–µ–Ω (–æ–±–Ω–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ Telegram –±–æ—Ç)"
            )
            
            logger.info("–¢–æ–∫–µ–Ω Tinkoff API –æ–±–Ω–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ Telegram –±–æ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î")
            
            await self.send_message(
                "‚úÖ <b>–¢–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!</b>\n\n"
                "‚ö†Ô∏è <b>–î–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä:</b>\n"
                "<code>docker compose restart</code>\n\n"
                "–ü–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º–∞ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω."
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ cmd_set_token: {e}")
            await self.send_message(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞: {str(e)}")
    
    async def cmd_stop_system(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stop"""
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            if not self._check_auth(update):
                await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
                return
            
            if self.system_control and hasattr(self.system_control, 'stop'):
                await self.system_control.stop()
                
                # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π
                positions = await self.db.get_open_positions()
                
                await update.message.reply_text(
                    "‚è∏Ô∏è <b>–°–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞</b>\n\n"
                    f"üìä –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π: <b>{len(positions)}</b>\n"
                    f"üî¥ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: <b>–≤—ã–∫–ª—é—á–µ–Ω</b>\n"
                    f"üî¥ –ê–≤—Ç–æ–æ—Ä–¥–µ—Ä–∞: <b>–≤—ã–∫–ª—é—á–µ–Ω—ã</b>\n\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ <code>/start</code> –¥–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã",
                    parse_mode='HTML'
                )
                
                logger.info("–°–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ Telegram –±–æ—Ç")
            else:
                await update.message.reply_text(
                    "‚ùå <b>–û—à–∏–±–∫–∞</b>\n\n"
                    "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.\n"
                    "–§—É–Ω–∫—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞.",
                    parse_mode='HTML'
                )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ cmd_stop_system: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
