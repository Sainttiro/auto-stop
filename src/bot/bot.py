"""
Telegram Bot –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–æ–π Auto-Stop
"""

import asyncio
import os
from typing import Optional
from datetime import datetime, timedelta
from telegram import Update, Bot
from telegram.ext import Application, CommandHandler, ContextTypes

from src.storage.database import Database
from src.core.position_manager import PositionManager
from src.utils.logger import get_logger

logger = get_logger("bot")


class TelegramBot:
    """
    Telegram Bot –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–æ–π
    """
    
    def __init__(
        self,
        token: str,
        chat_id: str,
        database: Database,
        position_manager: PositionManager,
        system_control: Optional[object] = None
    ):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
        
        Args:
            token: –¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞
            chat_id: ID —á–∞—Ç–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            database: –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
            position_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–∑–∏—Ü–∏–π
            system_control: –û–±—ä–µ–∫—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–æ–π (start/stop)
        """
        self.token = token
        self.chat_id = chat_id
        self.db = database
        self.position_manager = position_manager
        self.system_control = system_control
        
        self.application: Optional[Application] = None
        self.bot: Optional[Bot] = None
        self._running = False
        self.start_time = datetime.utcnow()
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        if self._running:
            logger.warning("–ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return
        
        try:
            # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            self.application = Application.builder().token(self.token).build()
            self.bot = self.application.bot
            
            # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
            self.application.add_handler(CommandHandler("start", self.cmd_start))
            self.application.add_handler(CommandHandler("stop", self.cmd_stop_system))
            self.application.add_handler(CommandHandler("help", self.cmd_help))
            self.application.add_handler(CommandHandler("status", self.cmd_status))
            self.application.add_handler(CommandHandler("positions", self.cmd_positions))
            self.application.add_handler(CommandHandler("stats", self.cmd_stats))
            self.application.add_handler(CommandHandler("logs", self.cmd_logs))
            self.application.add_handler(CommandHandler("set_token", self.cmd_set_token))
            
            # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
            await self.application.initialize()
            await self.application.start()
            await self.application.updater.start_polling()
            
            self._running = True
            logger.info("Telegram Bot –∑–∞–ø—É—â–µ–Ω")
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            await self.send_message("ü§ñ –ë–æ—Ç Auto-Stop –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
            raise
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
        if not self._running:
            return
        
        try:
            self._running = False
            
            if self.application:
                await self.application.updater.stop()
                await self.application.stop()
                await self.application.shutdown()
            
            logger.info("Telegram Bot –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞: {e}")
    
    async def send_message(self, text: str):
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç
        
        Args:
            text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        """
        try:
            if self.bot:
                await self.bot.send_message(
                    chat_id=self.chat_id,
                    text=text,
                    parse_mode='HTML'
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    async def cmd_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        await update.message.reply_text(
            "ü§ñ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Auto-Stop Bot!</b>\n\n"
            "–Ø –ø–æ–º–æ–≥—É –≤–∞–º —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–∏—Å—Ç–µ–º–æ–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Å—Ç–æ–ø-–ª–æ—Å—Å–æ–≤ –∏ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–æ–≤.\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/status - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã\n"
            "/positions - –¢–µ–∫—É—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏\n"
            "/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
            "/logs - –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏\n"
            "/help - –°–ø—Ä–∞–≤–∫–∞",
            parse_mode='HTML'
        )
    
    async def cmd_help(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        await update.message.reply_text(
            "üìñ <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º</b>\n\n"
            "<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>\n"
            "/status - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã (uptime, —Å–æ—Å—Ç–æ—è–Ω–∏–µ)\n"
            "/positions - –°–ø–∏—Å–æ–∫ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π\n"
            "/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–¥–µ–ª–∫–∞–º\n"
            "/logs - –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è\n\n"
            "<b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b>\n"
            "/stop - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥\n"
            "/set_token - –û–±–Ω–æ–≤–∏—Ç—å Tinkoff API —Ç–æ–∫–µ–Ω\n\n"
            "<b>–ü—Ä–æ—á–µ–µ:</b>\n"
            "/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
            "üí° <i>–í—Å–µ –∫–æ–º–∞–Ω–¥—ã —Ä–∞–±–æ—Ç–∞—é—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</i>",
            parse_mode='HTML'
        )
    
    async def cmd_status(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status"""
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            if str(update.effective_chat.id) != self.chat_id:
                await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
                return
            
            # –†–∞—Å—á–µ—Ç uptime
            uptime = datetime.utcnow() - self.start_time
            hours = int(uptime.total_seconds() // 3600)
            minutes = int((uptime.total_seconds() % 3600) // 60)
            
            status_text = (
                "üìä <b>–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã</b>\n\n"
                f"üü¢ –°—Ç–∞—Ç—É—Å: <b>–†–∞–±–æ—Ç–∞–µ—Ç</b>\n"
                f"‚è± Uptime: <b>{hours}—á {minutes}–º</b>\n"
                f"üìÖ –ó–∞–ø—É—â–µ–Ω–∞: <b>{self.start_time.strftime('%d.%m.%Y %H:%M:%S')} UTC</b>\n"
            )
            
            await update.message.reply_text(status_text, parse_mode='HTML')
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ cmd_status: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    
    async def cmd_positions(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /positions"""
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            if str(update.effective_chat.id) != self.chat_id:
                await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
                return
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π
            positions = await self.db.get_open_positions()
            
            if not positions:
                await update.message.reply_text("üì≠ –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π")
                return
            
            text = "üìà <b>–û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏</b>\n\n"
            
            for pos in positions:
                direction_emoji = "üü¢" if pos.direction == "BUY" else "üî¥"
                text += (
                    f"{direction_emoji} <b>{pos.ticker}</b>\n"
                    f"  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {pos.quantity}\n"
                    f"  –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {pos.average_price:.2f}\n"
                    f"  –¢–∏–ø: {pos.instrument_type}\n\n"
                )
            
            await update.message.reply_text(text, parse_mode='HTML')
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ cmd_positions: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    
    async def cmd_stats(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats"""
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            if str(update.effective_chat.id) != self.chat_id:
                await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
                return
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            total_trades = await self.db.get_total_trades_count()
            open_positions = await self.db.get_open_positions()
            
            text = (
                "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
                f"üìù –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: <b>{total_trades}</b>\n"
                f"üìà –û—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π: <b>{len(open_positions)}</b>\n"
            )
            
            await update.message.reply_text(text, parse_mode='HTML')
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ cmd_stats: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    
    async def cmd_logs(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /logs"""
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            if str(update.effective_chat.id) != self.chat_id:
                await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
                return
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–±—ã—Ç–∏–π
            events = await self.db.get_recent_events(limit=10)
            
            if not events:
                await update.message.reply_text("üì≠ –ù–µ—Ç —Å–æ–±—ã—Ç–∏–π –≤ –ª–æ–≥–∞—Ö")
                return
            
            text = "üìã <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è</b>\n\n"
            
            for event in events:
                emoji = "‚ÑπÔ∏è" if event.event_type == "INFO" else "‚ö†Ô∏è" if event.event_type == "STREAM_ERROR" else "‚ùå"
                text += (
                    f"{emoji} <code>{event.timestamp.strftime('%H:%M:%S')}</code> "
                    f"{event.event_type}\n"
                    f"  {event.description[:100]}\n\n"
                )
            
            await update.message.reply_text(text, parse_mode='HTML')
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ cmd_logs: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    
    async def cmd_set_token(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /set_token"""
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            if str(update.effective_chat.id) != self.chat_id:
                await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
                return
            
            # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–æ–∫–µ–Ω–æ–º –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            try:
                await update.message.delete()
            except:
                pass
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
            if not context.args or len(context.args) == 0:
                await self.send_message(
                    "‚ùå <b>–û—à–∏–±–∫–∞</b>\n\n"
                    "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <code>/set_token –ù–û–í–´–ô_–¢–û–ö–ï–ù</code>\n\n"
                    "‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–æ–∫–µ–Ω–æ–º –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–µ–Ω–æ"
                )
                return
            
            new_token = context.args[0]
            
            # –ü—É—Ç—å –∫ .env —Ñ–∞–π–ª—É
            env_path = "/app/.env"
            if not os.path.exists(env_path):
                env_path = ".env"
            
            # –ß—Ç–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ .env
            if os.path.exists(env_path):
                with open(env_path, 'r') as f:
                    lines = f.readlines()
                
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
                updated = False
                for i, line in enumerate(lines):
                    if line.startswith('TINKOFF_TOKEN='):
                        lines[i] = f'TINKOFF_TOKEN={new_token}\n'
                        updated = True
                        break
                
                # –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω, –¥–æ–±–∞–≤–ª—è–µ–º
                if not updated:
                    lines.append(f'TINKOFF_TOKEN={new_token}\n')
                
                # –ó–∞–ø–∏—Å—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ .env
                with open(env_path, 'w') as f:
                    f.writelines(lines)
                
                logger.info("–¢–æ–∫–µ–Ω Tinkoff API –æ–±–Ω–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ Telegram –±–æ—Ç")
                
                await self.send_message(
                    "‚úÖ <b>–¢–æ–∫–µ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω!</b>\n\n"
                    "‚ö†Ô∏è –î–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä:\n"
                    "<code>docker compose restart</code>\n\n"
                    "–ò–ª–∏ –ø–æ–¥–æ–∂–¥–∏—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –¥–µ–ø–ª–æ–µ."
                )
            else:
                await self.send_message(
                    "‚ùå <b>–û—à–∏–±–∫–∞</b>\n\n"
                    "–§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω"
                )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ cmd_set_token: {e}")
            await self.send_message(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞: {str(e)}")
    
    async def cmd_stop_system(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stop"""
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            if str(update.effective_chat.id) != self.chat_id:
                await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
                return
            
            if self.system_control and hasattr(self.system_control, 'stop'):
                await self.system_control.stop()
                
                # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π
                positions = await self.db.get_open_positions()
                
                await update.message.reply_text(
                    "‚è∏Ô∏è <b>–°–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞</b>\n\n"
                    f"üìä –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π: <b>{len(positions)}</b>\n"
                    f"üî¥ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: <b>–≤—ã–∫–ª—é—á–µ–Ω</b>\n"
                    f"üî¥ –ê–≤—Ç–æ–æ—Ä–¥–µ—Ä–∞: <b>–≤—ã–∫–ª—é—á–µ–Ω—ã</b>\n\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ <code>/start</code> –¥–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã",
                    parse_mode='HTML'
                )
                
                logger.info("–°–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ Telegram –±–æ—Ç")
            else:
                await update.message.reply_text(
                    "‚ùå <b>–û—à–∏–±–∫–∞</b>\n\n"
                    "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.\n"
                    "–§—É–Ω–∫—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞.",
                    parse_mode='HTML'
                )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ cmd_stop_system: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
