import asyncio
import argparse
import signal
import sys
from pathlib import Path
from typing import Dict, Optional, Any

from src.config.loader import load_config
from src.api.client import TinkoffAPIClient
from src.api.instrument_info import InstrumentInfoCache
from src.storage.database import Database
from src.core.position_manager import PositionManager
from src.core.risk_calculator import RiskCalculator
from src.core.order_executor import OrderExecutor
from src.core.stream_handler import StreamHandler
from src.strategies.stock_sl_tp import StockStrategy
from src.strategies.futures_sl_tp import FuturesStrategy
from src.strategies.multi_tp import MultiTakeProfitStrategy
from src.notifications.telegram import TelegramNotifier
from src.bot.bot import TelegramBot
from src.analytics import OperationsFetcher, OperationsCache, StatisticsCalculator, ReportFormatter
from src.utils.logger import setup_logger, get_logger

logger = get_logger("main")


class AutoStopSystem:
    """
    –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç–æ–ø-–ª–æ—Å—Å–∞–º–∏ –∏ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞–º–∏
    """
    
    def __init__(self, config_path: Optional[str] = None, instruments_path: Optional[str] = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã
        
        Args:
            config_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            instruments_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        """
        self.config_path = config_path
        self.instruments_path = instruments_path
        
        # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã
        self.config = None
        self.instruments_config = None
        self.api_client = None
        self.database = None
        self.instrument_cache = None
        self.position_manager = None
        self.risk_calculator = None
        self.order_executor = None
        self.stream_handler = None
        self.telegram_notifier = None
        self.telegram_bot = None
        
        # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
        self.operations_fetcher = None
        self.operations_cache = None
        self.statistics_calculator = None
        self.report_formatter = None
        
        # –°—Ç—Ä–∞—Ç–µ–≥–∏–∏
        self.strategies = {}
        
        # –§–ª–∞–≥ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã
        self._running = False
        self._shutdown_event = asyncio.Event()
    
    async def initialize(self):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã
        """
        try:
            # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            self.config, self.instruments_config = load_config(
                config_path=self.config_path,
                instruments_path=self.instruments_path
            )
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            setup_logger(self.config.logging)
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            self.database = Database()
            await self.database.create_tables()
            
            # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –º–∏–≥—Ä–∞—Ü–∏–π –ë–î
            await self.database.run_migrations()
            
            # –ü–†–ò–û–†–ò–¢–ï–¢: –¢–æ–∫–µ–Ω –∏–∑ –ë–î > –¢–æ–∫–µ–Ω –∏–∑ .env
            active_account = await self.database.get_active_account()
            
            if active_account:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ë–î
                token = active_account.token
                account_id = active_account.account_id
                logger.info(f"üîë –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∞–∫–∫–∞—É–Ω—Ç –∏–∑ –ë–î: {active_account.name} (ID: {account_id})")
            else:
                # Fallback –Ω–∞ —Ç–æ–∫–µ–Ω –∏–∑ .env
                token = self.config.api.token
                account_id = self.config.account_id
                logger.warning("‚ö†Ô∏è –ê–∫—Ç–∏–≤–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–∫–µ–Ω –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API –∫–ª–∏–µ–Ω—Ç–∞
            self.api_client = TinkoffAPIClient(
                token=token,
                app_name=self.config.api.app_name
            )
            await self.api_client.__aenter__()
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫—ç—à–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
            self.instrument_cache = InstrumentInfoCache(self.api_client)
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–π
            self.position_manager = PositionManager(
                database=self.database,
                instrument_cache=self.instrument_cache
            )
            await self.position_manager.initialize()
            
            # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ø–æ–∑–∏—Ü–∏–π –∏–∑ –ë–î –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
            # –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å –ø–æ–∑–∏—Ü–∏—è–º–∏, –æ—Ç–∫—Ä—ã—Ç—ã–º–∏ –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞
            logger.info("–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ø–æ–∑–∏—Ü–∏–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
            await self.database.clear_all_positions()
            
            # –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –ø–æ–∑–∏—Ü–∏–π –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ –ë–î
            self.position_manager.clear_cache()
            
            # –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –û–¢–ö–õ–Æ–ß–ï–ù–ê
            # –°–∏—Å—Ç–µ–º–∞ –ù–ï –ø–æ–¥—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–∑–∏—Ü–∏–∏, –æ—Ç–∫—Ä—ã—Ç—ã–µ –¥–æ –∑–∞–ø—É—Å–∫–∞
            # SL/TP –≤—ã—Å—Ç–∞–≤–ª—è—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ –Ω–æ–≤—ã–µ –ø–æ–∑–∏—Ü–∏–∏, –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã
            logger.info("–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–æ–∑–∏—Ü–∏–π –æ—Ç–∫–ª—é—á–µ–Ω–∞. –°–∏—Å—Ç–µ–º–∞ –±—É–¥–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –ø–æ–∑–∏—Ü–∏–∏.")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
            from src.config.settings_manager import SettingsManager
            self.settings_manager = SettingsManager(self.database)
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ —Ä–∏—Å–∫–æ–≤
            self.risk_calculator = RiskCalculator(
                default_settings=self.config.default_settings,
                instrument_cache=self.instrument_cache,
                settings_manager=self.settings_manager
            )
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –æ—Ä–¥–µ—Ä–æ–≤
            self.order_executor = OrderExecutor(
                api_client=self.api_client,
                database=self.database,
                instrument_cache=self.instrument_cache
            )
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
            self._initialize_strategies()
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
            self._initialize_analytics()
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            if self.config.telegram and self.config.telegram.bot_token and self.config.telegram.chat_id:
                self.telegram_notifier = TelegramNotifier(settings=self.config.telegram)
                await self.telegram_notifier.start()
                
                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ Telegram –±–æ—Ç–∞
                self.telegram_bot = TelegramBot(
                    token=self.config.telegram.bot_token,
                    chat_id=self.config.telegram.chat_id,
                    database=self.database,
                    position_manager=self.position_manager,
                    system_control=self,
                    operations_cache=self.operations_cache,
                    statistics_calculator=self.statistics_calculator,
                    report_formatter=self.report_formatter
                )
                await self.telegram_bot.start()
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –ø–æ—Ç–æ–∫–æ–≤
            self.stream_handler = StreamHandler(
                api_client=self.api_client,
                database=self.database,
                position_manager=self.position_manager,
                risk_calculator=self.risk_calculator,
                order_executor=self.order_executor,
                config=self.config,
                instruments_config=self.instruments_config,
                instrument_cache=self.instrument_cache
            )
            
            logger.info("–°–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã: {e}")
            await self.shutdown()
            return False
    
    def _initialize_strategies(self):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
        """
        # –°—Ç—Ä–∞—Ç–µ–≥–∏—è –¥–ª—è –∞–∫—Ü–∏–π
        self.strategies["stock"] = StockStrategy(
            risk_calculator=self.risk_calculator,
            order_executor=self.order_executor
        )
        
        # –°—Ç—Ä–∞—Ç–µ–≥–∏—è –¥–ª—è —Ñ—å—é—á–µ—Ä—Å–æ–≤
        self.strategies["futures"] = FuturesStrategy(
            risk_calculator=self.risk_calculator,
            order_executor=self.order_executor
        )
        
        # –°—Ç—Ä–∞—Ç–µ–≥–∏—è –¥–ª—è –º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤–æ–≥–æ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞
        self.strategies["multi_tp"] = MultiTakeProfitStrategy(
            risk_calculator=self.risk_calculator,
            order_executor=self.order_executor
        )
    
    def _initialize_analytics(self):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
        """
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è fetcher –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π –∏–∑ API
        self.operations_fetcher = OperationsFetcher(
            api_client=self.api_client,
            instrument_cache=self.instrument_cache
        )
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫—ç—à–∞ –æ–ø–µ—Ä–∞—Ü–∏–π
        self.operations_cache = OperationsCache(
            database=self.database,
            fetcher=self.operations_fetcher
        )
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        self.statistics_calculator = StatisticsCalculator()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä–∞ –æ—Ç—á–µ—Ç–æ–≤
        self.report_formatter = ReportFormatter()
        
        logger.info("–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
    
    async def start(self):
        """
        –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã
        """
        if self._running:
            logger.warning("–°–∏—Å—Ç–µ–º–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞")
            return
        
        if not self.config or not self.stream_handler:
            logger.error("–°–∏—Å—Ç–µ–º–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º account_id –∏–∑ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –∏–ª–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        active_account = await self.database.get_active_account()
        if active_account:
            account_id = active_account.account_id
        else:
            account_id = self.config.account_id
        
        if not account_id:
            logger.error("–ù–µ —É–∫–∞–∑–∞–Ω ID —Å—á–µ—Ç–∞")
            return
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ—Ç–æ–∫–æ–≤
            await self.stream_handler.start(account_id)
            
            self._running = True
            logger.info(f"–°–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞ –¥–ª—è —Å—á–µ—Ç–∞ {account_id}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º last_used_at –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∞–∫–∫–∞—É–Ω—Ç –∏–∑ –ë–î
            if active_account:
                await self.database.update_account_last_used(account_id)
            
            # –û–∂–∏–¥–∞–µ–º —Å–∏–≥–Ω–∞–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            await self._shutdown_event.wait()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–∏—Å—Ç–µ–º—ã: {e}")
        finally:
            await self.shutdown()
    
    async def reload_api_client(self, new_account_name: Optional[str] = None):
        """
        –ì–æ—Ä—è—á–µ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API —Å –Ω–æ–≤—ã–º —Ç–æ–∫–µ–Ω–æ–º
        
        Args:
            new_account_name: –ò–º—è –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è (–µ—Å–ª–∏ None - –ø–µ—Ä–µ—á–∏—Ç–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π)
        """
        logger.info("–ù–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ API –∫–ª–∏–µ–Ω—Ç–∞...")
        
        try:
            # 1. –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç –≤ –ë–î (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω)
            if new_account_name:
                success = await self.database.switch_account(new_account_name)
                if not success:
                    raise ValueError(f"–ê–∫–∫–∞—É–Ω—Ç {new_account_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
            # 2. –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç –∏–∑ –ë–î
            active_account = await self.database.get_active_account()
            if not active_account:
                raise ValueError("–ê–∫—Ç–∏–≤–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î")
            
            # 3. –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–π stream handler
            if self.stream_handler:
                logger.info("–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º stream handler...")
                await self.stream_handler.stop()
            
            # 4. –ó–∞–∫—Ä—ã—Ç—å —Ç–µ–∫—É—â–∏–π API –∫–ª–∏–µ–Ω—Ç
            if self.api_client:
                logger.info("–ó–∞–∫—Ä—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π API –∫–ª–∏–µ–Ω—Ç...")
                await self.api_client.__aexit__(None, None, None)
            
            # 5. –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π API –∫–ª–∏–µ–Ω—Ç —Å –Ω–æ–≤—ã–º —Ç–æ–∫–µ–Ω–æ–º
            logger.info(f"–°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π API –∫–ª–∏–µ–Ω—Ç –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ '{active_account.name}'...")
            self.api_client = TinkoffAPIClient(
                token=active_account.token,
                app_name=self.config.api.app_name
            )
            await self.api_client.__aenter__()
            
            # 6. –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∑–∞–≤–∏—Å–∏–º—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
            logger.info("–ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–≤–∏—Å–∏–º—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã...")
            self.instrument_cache = InstrumentInfoCache(self.api_client)
            
            self.order_executor = OrderExecutor(
                api_client=self.api_client,
                database=self.database,
                instrument_cache=self.instrument_cache
            )
            
            # –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Å –Ω–æ–≤—ã–º executor
            self._initialize_strategies()
            
            # 7. –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π stream handler
            logger.info("–°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π stream handler...")
            self.stream_handler = StreamHandler(
                api_client=self.api_client,
                database=self.database,
                position_manager=self.position_manager,
                risk_calculator=self.risk_calculator,
                order_executor=self.order_executor,
                config=self.config,
                instruments_config=self.instruments_config,
                instrument_cache=self.instrument_cache
            )
            
            # 8. –ó–∞–ø—É—Å—Ç–∏—Ç—å stream handler —Å –Ω–æ–≤—ã–º account_id
            logger.info(f"–ó–∞–ø—É—Å–∫–∞–µ–º stream handler –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {active_account.account_id}...")
            await self.stream_handler.start(active_account.account_id)
            
            # 9. –û–±–Ω–æ–≤–∏—Ç—å last_used_at
            await self.database.update_account_last_used(active_account.account_id)
            
            logger.info(f"‚úÖ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ê–∫—Ç–∏–≤–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç: {active_account.name}")
            
            # –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
            if self.telegram_bot:
                await self.telegram_bot.send_message(
                    f"‚úÖ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç <b>{active_account.name}</b> –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n"
                    f"üÜî Account ID: <code>{active_account.account_id}</code>"
                )
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏: {e}")
            
            # –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            if self.telegram_bot:
                await self.telegram_bot.send_message(
                    f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏: {str(e)}"
                )
            
            raise
    
    async def shutdown(self):
        """
        –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã
        """
        if not self._running:
            return
        
        logger.info("–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã...")
        self._running = False
        
        try:
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ—Ç–æ–∫–æ–≤ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
            if self.stream_handler:
                logger.info("–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ—Ç–æ–∫–æ–≤...")
                try:
                    await asyncio.wait_for(self.stream_handler.stop(), timeout=5.0)
                    logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ—Ç–æ–∫–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                except asyncio.TimeoutError:
                    logger.warning("–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –ø–æ—Ç–æ–∫–æ–≤ (5 —Å–µ–∫)")
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Telegram –±–æ—Ç–∞ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
            if self.telegram_bot:
                logger.info("–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Telegram –±–æ—Ç–∞...")
                try:
                    await asyncio.wait_for(self.telegram_bot.stop(), timeout=2.0)
                    logger.info("Telegram –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                except asyncio.TimeoutError:
                    logger.warning("–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ Telegram –±–æ—Ç–∞ (2 —Å–µ–∫)")
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å —Ç–∞–π–º–∞—É—Ç–æ–º
            if self.telegram_notifier:
                logger.info("–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è...")
                try:
                    await asyncio.wait_for(self.telegram_notifier.stop(), timeout=2.0)
                    logger.info("Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
                except asyncio.TimeoutError:
                    logger.warning("–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (2 —Å–µ–∫)")
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º API –∫–ª–∏–µ–Ω—Ç —Å —Ç–∞–π–º–∞—É—Ç–æ–º
            if self.api_client:
                logger.info("–ó–∞–∫—Ä—ã–≤–∞–µ–º API –∫–ª–∏–µ–Ω—Ç...")
                try:
                    await asyncio.wait_for(
                        self.api_client.__aexit__(None, None, None),
                        timeout=3.0
                    )
                    logger.info("API –∫–ª–∏–µ–Ω—Ç –∑–∞–∫—Ä—ã—Ç")
                except asyncio.TimeoutError:
                    logger.warning("–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ API –∫–ª–∏–µ–Ω—Ç–∞ (3 —Å–µ–∫)")
            
            logger.info("–°–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã: {e}")
        finally:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
            self._shutdown_event.set()
    
    def signal_handler(self, sig, frame):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        """
        logger.info(f"–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {sig}, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π event loop
        try:
            loop = asyncio.get_event_loop()
            # –ü–ª–∞–Ω–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤ event loop –ø–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º
            loop.call_soon_threadsafe(lambda: asyncio.create_task(self.shutdown()))
        except RuntimeError:
            # –ï—Å–ª–∏ event loop –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –Ω–∞–ø—Ä—è–º—É—é
            self._shutdown_event.set()


async def main():
    """
    –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    """
    # –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    parser = argparse.ArgumentParser(description="–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç–æ–ø-–ª–æ—Å—Å–∞–º–∏ –∏ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞–º–∏")
    parser.add_argument("--config", help="–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
    parser.add_argument("--instruments", help="–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤")
    args = parser.parse_args()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã
    system = AutoStopSystem(
        config_path=args.config,
        instruments_path=args.instruments
    )
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤
    signal.signal(signal.SIGINT, system.signal_handler)
    signal.signal(signal.SIGTERM, system.signal_handler)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∑–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã
    if await system.initialize():
        await system.start()


if __name__ == "__main__":
    asyncio.run(main())
